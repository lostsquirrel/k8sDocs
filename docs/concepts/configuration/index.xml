<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes – 配置</title>
    <link>https://lostsquirrel.github.io/k8sDocs/docs/concepts/configuration/</link>
    <description>Recent content in 配置 on Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	  <atom:link href="https://lostsquirrel.github.io/k8sDocs/docs/concepts/configuration/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 配置最佳实践</title>
      <link>https://lostsquirrel.github.io/k8sDocs/docs/concepts/configuration/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/docs/concepts/configuration/overview/</guid>
      <description>
        
        
        &lt;!--
---
reviewers:
- mikedanese
title: Configuration Best Practices
content_type: concept
weight: 10
---
 --&gt;
&lt;!-- overview --&gt;
&lt;p&gt;本文主要加强和巩固从用户指引，入门文档，和示例中介绍过的配置的最佳实践。&lt;/p&gt;
&lt;p&gt;这是一个活动文档，如果用户觉得有些内容文档上没有但可以对其他人有帮助，不要犹豫，赶紧提交问题单或
提供 PR&lt;/p&gt;
&lt;!-- body --&gt;
&lt;!--
## General Configuration Tips

- When defining configurations, specify the latest stable API version.

- Configuration files should be stored in version control before being pushed to the cluster. This allows you to quickly roll back a configuration change if necessary. It also aids cluster re-creation and restoration.

- Write your configuration files using YAML rather than JSON. Though these formats can be used interchangeably in almost all scenarios, YAML tends to be more user-friendly.

- Group related objects into a single file whenever it makes sense. One file is often easier to manage than several. See the [guestbook-all-in-one.yaml](https://github.com/kubernetes/examples/tree/master/guestbook/all-in-one/guestbook-all-in-one.yaml) file as an example of this syntax.

- Note also that many `kubectl` commands can be called on a directory. For example, you can call `kubectl apply` on a directory of config files.

- Don&#39;t specify default values unnecessarily: simple, minimal configuration will make errors less likely.

- Put object descriptions in annotations, to allow better introspection.
 --&gt;
&lt;h2 id=&#34;通用配置提示&#34;&gt;通用配置提示&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在定义配置时，指定最新的稳定 API 版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置文件在推送到集群之前先保住到版本控制系统。 这样如果需要可以快速回滚配置变更。 也可以帮助集群重建或恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 YAML 格式编写配置文件而不是 JSON。 虽然这两个格式在几乎所有场景下都可以互换，但 YAML 对用户更友好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当几个对象有关系时将其放在一个文件中。 一个文件会比多个文件更容易管理。相关语法见示例
&lt;a href=&#34;https://github.com/kubernetes/examples/tree/master/guestbook/all-in-one/guestbook-all-in-one.yaml&#34;&gt;guestbook-all-in-one.yaml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要知道 &lt;code&gt;kubectl&lt;/code&gt; 命令可以向一个目录调用，例如，可以对一个目录执行 &lt;code&gt;kubectl apply&lt;/code&gt;，表示
执行其中的所有配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请不要指定不必要的默认值: 简单，最小化配置，通常可以减少错误的产生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将对象描述加到注解中，让其可以对用户或自动化工具更友好。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
## &#34;Naked&#34; Pods versus ReplicaSets, Deployments, and Jobs {#naked-pods-vs-replicasets-deployments-and-jobs}

- Don&#39;t use naked Pods (that is, Pods not bound to a [ReplicaSet](/docs/concepts/workloads/controllers/replicaset/) or [Deployment](/docs/concepts/workloads/controllers/deployment/)) if you can avoid it. Naked Pods will not be rescheduled in the event of a node failure.

  A Deployment, which both creates a ReplicaSet to ensure that the desired number of Pods is always available, and specifies a strategy to replace Pods (such as [RollingUpdate](/docs/concepts/workloads/controllers/deployment/#rolling-update-deployment)), is almost always preferable to creating Pods directly, except for some explicit [`restartPolicy: Never`](/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy) scenarios. A [Job](/docs/concepts/workloads/controllers/job/) may also be appropriate.
--&gt;
&lt;h2 id=&#34;naked-pods-vs-replicasets-deployments-and-jobs&#34;&gt;&amp;ldquo;裸奔&amp;quot;的 Pod VS ReplicaSet, Deployment, Job&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果能避免，尽量不要让 Pod 裸奔(也就是没有与
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/workloads/controllers/replicaset/&#34;&gt;ReplicaSet&lt;/a&gt;
或
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/workloads/controllers/deployment/&#34;&gt;Deployment&lt;/a&gt;
绑定的 Pod
)。
裸奔的 Pod 在节点挂掉之后不会重新调度。&lt;/p&gt;
&lt;p&gt;面 Deployment， 在创建一个 ReplicaSet 来保证期望个数的 Pod 始终可用外，还可以指定替换策略
(如
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/workloads/controllers/deployment/#rolling-update-deployment&#34;&gt;RollingUpdate&lt;/a&gt;
)，
除了一个具体场景
(&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy&#34;&gt;&lt;code&gt;restartPolicy: Never&lt;/code&gt;&lt;/a&gt;)
都推荐使用 Deployment 而不是直接创建 Pod。
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/workloads/controllers/job/&#34;&gt;Job&lt;/a&gt; 也是另一种选择。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
## Services

- Create a [Service](/docs/concepts/services-networking/service/) before its corresponding backend workloads (Deployments or ReplicaSets), and before any workloads that need to access it. When Kubernetes starts a container, it provides environment variables pointing to all the Services which were running when the container was started. For example, if a Service named `foo` exists, all containers will get the following variables in their initial environment:

  ```shell
  FOO_SERVICE_HOST=&lt;the host the Service is running on&gt;
  FOO_SERVICE_PORT=&lt;the port the Service is running on&gt;
  ```

  *This does imply an ordering requirement* - any `Service` that a `Pod` wants to access must be created before the `Pod` itself, or else the environment variables will not be populated.  DNS does not have this restriction.

- An optional (though strongly recommended) [cluster add-on](/docs/concepts/cluster-administration/addons/) is a DNS server.  The
DNS server watches the Kubernetes API for new `Services` and creates a set of DNS records for each.  If DNS has been enabled throughout the cluster then all `Pods` should be able to do name resolution of `Services` automatically.

- Don&#39;t specify a `hostPort` for a Pod unless it is absolutely necessary. When you bind a Pod to a `hostPort`, it limits the number of places the Pod can be scheduled, because each &lt;`hostIP`, `hostPort`, `protocol`&gt; combination must be unique. If you don&#39;t specify the `hostIP` and `protocol` explicitly, Kubernetes will use `0.0.0.0` as the default `hostIP` and `TCP` as the default `protocol`.

  If you only need access to the port for debugging purposes, you can use the [apiserver proxy](/docs/tasks/access-application-cluster/access-cluster/#manually-constructing-apiserver-proxy-urls) or [`kubectl port-forward`](/docs/tasks/access-application-cluster/port-forward-access-application-cluster/).

  If you explicitly need to expose a Pod&#39;s port on the node, consider using a [NodePort](/docs/concepts/services-networking/service/#nodeport) Service before resorting to `hostPort`.

- Avoid using `hostNetwork`, for the same reasons as `hostPort`.

- Use [headless Services](/docs/concepts/services-networking/service/#headless-services) (which have a `ClusterIP` of `None`) for easy service discovery when you don&#39;t need `kube-proxy` load balancing.
 --&gt;
&lt;h2 id=&#34;service&#34;&gt;Service&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在对应的后端工作负载(Deployments 或 ReplicaSets) 和任意访问它的工作负载之前创建一个
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/concepts/services-networking/service/&#34;&gt;Service&lt;/a&gt;。
当 k8s 启动一个容器时， 它会在容器启动时生成指向所有正在运行的 Service 的环境变量。
例如， 如果存在一个叫 &lt;code&gt;foo&lt;/code&gt; 的 Service，所有都会有如下初始化环境变量:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;FOO_SERVICE_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;the host the Service is running on&amp;gt;
FOO_SERVICE_PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;the port the Service is running on&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;这就存在一个隐式的启动顺序要求&lt;/em&gt; - 一个 Pod 想要访问的任意 Service 都需要在这个 Pod 创建
之前就要存在，否则对应的环境变量就不会生成。 DNS 就没有这个限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个可选(但强烈推荐)的
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/cluster-administration/addons/&#34;&gt;集群插件&lt;/a&gt;
就是 DNS 服务。 DNS 服务会监听 k8s API 中新增的 &lt;code&gt;Services&lt;/code&gt; 并对应创建一系列 DNS 记录。
如果集群中启动了 DNS 则 所有的 Pod 都可以自动通过 DNS 解析访问 &lt;code&gt;Services&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果不必要，请不要为一个 Pod 指定 &lt;code&gt;hostPort&lt;/code&gt;。 当将一个 Pod 绑定到一个 &lt;code&gt;hostPort&lt;/code&gt; 时，
就会限制这个 Pod 能调度的范围， 因为每个 &amp;lt;&lt;code&gt;hostIP&lt;/code&gt;, &lt;code&gt;hostPort&lt;/code&gt;, &lt;code&gt;protocol&lt;/code&gt;&amp;gt; 的组合在
全集群内是唯一的。 如果没有显示地指定 &lt;code&gt;hostIP&lt;/code&gt; 和 &lt;code&gt;protocol&lt;/code&gt;，k8s 全使用 &lt;code&gt;0.0.0.0&lt;/code&gt;
作为默认的 &lt;code&gt;hostIP&lt;/code&gt;， &lt;code&gt;TCP&lt;/code&gt; 作为默认的 &lt;code&gt;protocol&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;如果只为调试目的需要访问端口，可以使用
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/access-application-cluster/access-cluster/#manually-constructing-apiserver-proxy-urls&#34;&gt;apiserver proxy&lt;/a&gt;
或
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/access-application-cluster/port-forward-access-application-cluster/&#34;&gt;&lt;code&gt;kubectl port-forward&lt;/code&gt;&lt;/a&gt;.
如果确实需要将 Pod 端口在节点上显露，在使用 &lt;code&gt;hostPort&lt;/code&gt; 之前考虑使用 &lt;code&gt;hostPort&lt;/code&gt;的
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/services-networking/service/#nodeport&#34;&gt;NodePort&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与 &lt;code&gt;hostPort&lt;/code&gt; 的理由一样，避免使用 &lt;code&gt;hostNetwork&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在不需要 &lt;code&gt;kube-proxy&lt;/code&gt; 负载均衡的情况下，使用
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/services-networking/service/#headless-services&#34;&gt;headless Services&lt;/a&gt;
(就是将 &lt;code&gt;ClusterIP&lt;/code&gt; 设置为 &lt;code&gt;None&lt;/code&gt;)
来实现简单的服务发现&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
## Using Labels

- Define and use [labels](/docs/concepts/overview/working-with-objects/labels/) that identify __semantic attributes__ of your application or Deployment, such as `{ app: myapp, tier: frontend, phase: test, deployment: v3 }`. You can use these labels to select the appropriate Pods for other resources; for example, a Service that selects all `tier: frontend` Pods, or all `phase: test` components of `app: myapp`. See the [guestbook](https://github.com/kubernetes/examples/tree/master/guestbook/) app for examples of this approach.

A Service can be made to span multiple Deployments by omitting release-specific labels from its selector. [Deployments](/docs/concepts/workloads/controllers/deployment/) make it easy to update a running service without downtime.

A desired state of an object is described by a Deployment, and if changes to that spec are _applied_, the deployment controller changes the actual state to the desired state at a controlled rate.

- You can manipulate labels for debugging. Because Kubernetes controllers (such as ReplicaSet) and Services match to Pods using selector labels, removing the relevant labels from a Pod will stop it from being considered by a controller or from being served traffic by a Service. If you remove the labels of an existing Pod, its controller will create a new Pod to take its place. This is a useful way to debug a previously &#34;live&#34; Pod in a &#34;quarantine&#34; environment. To interactively remove or add labels, use [`kubectl label`](/docs/reference/generated/kubectl/kubectl-commands#label).
 --&gt;
&lt;h2 id=&#34;使用标签&#34;&gt;使用标签&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为应用或 Deployment 定义和使用
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/overview/working-with-objects/labels/&#34;&gt;标签&lt;/a&gt;
来设置 &lt;strong&gt;有语义的属性&lt;/strong&gt;, 如
&lt;code&gt;{ app: myapp, tier: frontend, phase: test, deployment: v3 }&lt;/code&gt;，
这样其它的资源就可以通过这些标签来选择合适的 Pod; 例如， 一个 Service 可以选择所有
&lt;code&gt;tier: frontend&lt;/code&gt; 的 Pod，或者 &lt;code&gt;app: myapp&lt;/code&gt; 的所有 &lt;code&gt;phase: test&lt;/code&gt; 组件。
更多使用方式见示例
&lt;a href=&#34;https://github.com/kubernetes/examples/tree/master/guestbook/&#34;&gt;guestbook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个 Service 可以在选择器中省略与发布版本相关的标签，这样就可以横跨多个版本。这样
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/workloads/controllers/deployment/&#34;&gt;Deployments&lt;/a&gt;
就可以很容易地在不停止提供服务的情况下实现服务的更新&lt;/p&gt;
&lt;p&gt;一个对象的期望状态是以一个 Deployment 来描述的， 如果它的配置的变更被_执行_，则 Deployment
控制器会以一个控制频率将实际状态变更到与期望状态相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户可以可能操作标签来方便调试。 因为 k8s 控制器(如 ReplicaSet) 和 Service 使用选择器标签
来匹配 Pod， 移除相应的标签就可以认为是将其从一个控制器中移出或从一个 Service 服务后端移出。
当移除一个现有 Pod 的标签后，它的控制器会创建一个新的 Pod 来代替它的位置。 这是一种在隔离环境中调试之前
存活 Pod 的有效方式。 而要移除或添加标签，使用
&lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#label&#34;&gt;&lt;code&gt;kubectl label&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
## Container Images

The [imagePullPolicy](/docs/concepts/containers/images/#updating-images) and the tag of the image affect when the [kubelet](/docs/reference/command-line-tools-reference/kubelet/) attempts to pull the specified image.

- `imagePullPolicy: IfNotPresent`: the image is pulled only if it is not already present locally.

- `imagePullPolicy: Always`: every time the kubelet launches a container, the kubelet queries the container image registry to resolve the name to an image digest. If the kubelet has a container image with that exact digest cached locally, the kubelet uses its cached image; otherwise, the kubelet downloads (pulls) the image with the resolved digest, and uses that image to launch the container.

- `imagePullPolicy` is omitted and either the image tag is `:latest` or it is omitted: `Always` is applied.

- `imagePullPolicy` is omitted and the image tag is present but not `:latest`: `IfNotPresent` is applied.

- `imagePullPolicy: Never`: the image is assumed to exist locally. No attempt is made to pull the image.

&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; To make sure the container always uses the same version of the image, you can specify its &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/pull/#pull-an-image-by-digest-immutable-identifier&#34;&gt;digest&lt;/a&gt;; replace &lt;code&gt;&amp;lt;image-name&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;image-name&amp;gt;@&amp;lt;digest&amp;gt;&lt;/code&gt; (for example, &lt;code&gt;image@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2&lt;/code&gt;). The digest uniquely identifies a specific version of the image, so it is never updated by Kubernetes unless you change the digest value.&lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; You should avoid using the &lt;code&gt;:latest&lt;/code&gt; tag when deploying containers in production as it is harder to track which version of the image is running and more difficult to roll back properly.&lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; The caching semantics of the underlying image provider make even &lt;code&gt;imagePullPolicy: Always&lt;/code&gt; efficient. With Docker, for example, if the image already exists, the pull attempt is fast because all image layers are cached and no image download is needed.&lt;/div&gt;
&lt;/blockquote&gt;

--&gt;
&lt;h2 id=&#34;容器镜像&#34;&gt;容器镜像&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/containers/images/#updating-images&#34;&gt;imagePullPolicy&lt;/a&gt; 和镜像和标签会影响
&lt;a href=&#34;https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/&#34;&gt;kubelet&lt;/a&gt;
拉取指定的镜像。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;imagePullPolicy: IfNotPresent&lt;/code&gt;: 镜像只在本地不存在时才会拉取。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imagePullPolicy: Always&lt;/code&gt;: 每次 kubelet 启动一个容器时， kubelet 查询容器镜像仓库将名称解析为镜像摘要。
如果 kubelet 发现本地缓存中有摘要完全相同的容器镜像时， kubelet 会使用缓存的镜像。否则，
kubelet 使用解析的摘要下载(拉取)镜像，并使用这个镜像来启动容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imagePullPolicy&lt;/code&gt; 如果该字段未设置而 镜像标签为 &lt;code&gt;:latest&lt;/code&gt;，或没有标签 则会被忽略或者如果未设置值，则默认执行 &lt;code&gt;Always&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imagePullPolicy&lt;/code&gt; 如果该字段未设置而镜像设置了标签并且不是 &lt;code&gt;:latest&lt;/code&gt;，则该字段会应用为 &lt;code&gt;IfNotPresent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imagePullPolicy: Never&lt;/code&gt;: 假定镜像是本地存在。 不会尝试拉取镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; 要保证容器即便使用同一个版本的镜像，可以使用
&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/pull/#pull-an-image-by-digest-immutable-identifier&#34;&gt;摘要&lt;/a&gt;;
用 &lt;code&gt;&amp;lt;image-name&amp;gt;@&amp;lt;digest&amp;gt;&lt;/code&gt;(例如，&lt;code&gt;image@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2&lt;/code&gt;)
代替 &lt;code&gt;&amp;lt;image-name&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code&gt;。 摘要可以唯一标识指定版本的镜像， 所以在不修改摘要的情况，k8s
不会改掉的这个镜像。&lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; 在生产环境中应当避免使用 &lt;code&gt;:latest&lt;/code&gt; 标签，因为它会使得很难追踪正在运行的是哪个镜像，更难以实现
回滚。&lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; 底层镜像供应者的缓存主义使得即便 &lt;code&gt;imagePullPolicy: Always&lt;/code&gt; 也是高效的。 例如，Docker
如果镜像已经存在， 摘取尝试会很快，因为镜像的所有层都已经缓存并不需要下载。&lt;/div&gt;
&lt;/blockquote&gt;

&lt;!--
## Using kubectl

- Use `kubectl apply -f &lt;directory&gt;`. This looks for Kubernetes configuration in all `.yaml`, `.yml`, and `.json` files in `&lt;directory&gt;` and passes it to `apply`.

- Use label selectors for `get` and `delete` operations instead of specific object names. See the sections on [label selectors](/docs/concepts/overview/working-with-objects/labels/#label-selectors) and [using labels effectively](/docs/concepts/cluster-administration/manage-deployment/#using-labels-effectively).

- Use `kubectl create deployment` and `kubectl expose` to quickly create single-container Deployments and Services. See [Use a Service to Access an Application in a Cluster](/docs/tasks/access-application-cluster/service-access-application-cluster/) for an example.
 --&gt;
&lt;h2 id=&#34;使用-kubectl&#34;&gt;使用 kubectl&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;kubectl apply -f &amp;lt;directory&amp;gt;&lt;/code&gt;. 这会查找 k8s 配置，包含 &lt;code&gt;&amp;lt;directory&amp;gt;&lt;/code&gt; 中的
&lt;code&gt;.yaml&lt;/code&gt;, &lt;code&gt;.yml&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt; 文件，并作为 &lt;code&gt;apply&lt;/code&gt; 的参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用标签选择器作为 &lt;code&gt;get&lt;/code&gt; 和 &lt;code&gt;delete&lt;/code&gt; 操作的选择条件而不指定对象名称。 见
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/overview/working-with-objects/labels/#label-selectors&#34;&gt;标签选择器&lt;/a&gt;
和
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/cluster-administration/manage-deployment/#using-labels-effectively&#34;&gt;高效使用标签&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;kubectl create deployment&lt;/code&gt; 和 &lt;code&gt;kubectl expose&lt;/code&gt; 快速创建单容器的 Deployment 和 Service
示例见
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/access-application-cluster/service-access-application-cluster/&#34;&gt;使用 Service 访问集群中的应用&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: ConfigMap</title>
      <link>https://lostsquirrel.github.io/k8sDocs/docs/concepts/configuration/configmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/docs/concepts/configuration/configmap/</guid>
      <description>
        
        
        &lt;!--
---
title: ConfigMaps
content_type: concept
weight: 20
---
 --&gt;
&lt;!-- overview --&gt;
&lt;!--

&lt;p&gt;&lt;p&gt;A ConfigMap is 一个以键值对形式存储非敏感数据的 API 对象。
Pod 可以在环境变量，命令行参数或
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/storage/volumes/&#39; target=&#39;_blank&#39;&gt;volume&lt;span class=&#39;tooltip-text&#39;&gt;一个可以被 Pod 中的容器访问的包含数据的目录&lt;/span&gt;
&lt;/a&gt;
中的配置文件中使用它。&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;ConfigMap 允许用户将环境相关的配置从
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/.Site.baseURL/reference/glossary/?all=true#term-image&#39; target=&#39;_blank&#39;&gt;镜像(Image)&lt;span class=&#39;tooltip-text&#39;&gt;一个容器的存储实例，其中包含一系列运行应用所需要的软件。&lt;/span&gt;
&lt;/a&gt;
中解耦出来，这样可以很容易地实现应用的移植。&lt;/p&gt;

&lt;blockquote class=&#34;caution&#34;&gt;
  &lt;div&gt;&lt;strong&gt;注意：&lt;/strong&gt; ConfigMap does not provide secrecy or encryption.
If the data you want to store are confidential, use a
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/configuration/secret/&#39; target=&#39;_blank&#39;&gt;Secret&lt;span class=&#39;tooltip-text&#39;&gt;存放如密码, OAuth, ssh 密钥等敏感信息&lt;/span&gt;
&lt;/a&gt; rather than a ConfigMap,
or use additional (third party) tools to keep your data private.&lt;/div&gt;
&lt;/blockquote&gt;

 --&gt;
&lt;p&gt;&lt;p&gt;ConfigMap 就是 一个以键值对形式存储非敏感数据的 API 对象。
Pod 可以在环境变量，命令行参数或
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/storage/volumes/&#39; target=&#39;_blank&#39;&gt;volume&lt;span class=&#39;tooltip-text&#39;&gt;一个可以被 Pod 中的容器访问的包含数据的目录&lt;/span&gt;
&lt;/a&gt;
中的配置文件中使用它。&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;ConfigMap 允许用户将环境相关的配置从
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/.Site.baseURL/reference/glossary/?all=true#term-image&#39; target=&#39;_blank&#39;&gt;镜像(Image)&lt;span class=&#39;tooltip-text&#39;&gt;一个容器的存储实例，其中包含一系列运行应用所需要的软件。&lt;/span&gt;
&lt;/a&gt;
中解耦出来，这样可以很容易地实现应用的移植。&lt;/p&gt;
&lt;blockquote class=&#34;caution&#34;&gt;
  &lt;div&gt;&lt;strong&gt;注意：&lt;/strong&gt; ConfigMap 不提供保密性或对其加密。 如果想要存放的保留信息，请使用
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/configuration/secret/&#39; target=&#39;_blank&#39;&gt;Secret&lt;span class=&#39;tooltip-text&#39;&gt;存放如密码, OAuth, ssh 密钥等敏感信息&lt;/span&gt;
&lt;/a&gt;
而不是 ConfigMap， 或使用外部(第三方)工具来保证数据的保密性。&lt;/div&gt;
&lt;/blockquote&gt;

&lt;!-- body --&gt;
&lt;!--
## Motivation

Use a ConfigMap for setting configuration data separately from application code.

For example, imagine that you are developing an application that you can run on your
own computer (for development) and in the cloud (to handle real traffic).
You write the code to look in an environment variable named `DATABASE_HOST`.
Locally, you set that variable to `localhost`. In the cloud, you set it to
refer to a Kubernetes &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/concepts/services-networking/service/&#39; target=&#39;_blank&#39;&gt;Service&lt;span class=&#39;tooltip-text&#39;&gt;以网络服务的方式让一个由一组 Pod 构成的应用可以对外提供服务的一种方式&lt;/span&gt;
&lt;/a&gt;
that exposes the database component to your cluster.
This lets you fetch a container image running in the cloud and
debug the exact same code locally if needed.

A ConfigMap is not designed to hold large chunks of data. The data stored in a
ConfigMap cannot exceed 1 MiB. If you need to store settings that are
larger than this limit, you may want to consider mounting a volume or use a
separate database or file service.
 --&gt;
&lt;h2 id=&#34;动机&#34;&gt;动机&lt;/h2&gt;
&lt;p&gt;使用 ConfigMap 将配置数据与应用代码分离。&lt;/p&gt;
&lt;p&gt;例如，假设开发了一个应用，可以在本地机器上(开发)运行和云环境(处理生产流量)。 可以在代码中读取
一个叫 &lt;code&gt;DATABASE_HOST&lt;/code&gt; 环境变量。 在本地，可以将这个变量设置为 &lt;code&gt;localhost&lt;/code&gt;。 在云环境中
可以将它指定 k8s 集群中用于暴露数据库组件的
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/concepts/services-networking/service/&#39; target=&#39;_blank&#39;&gt;Service&lt;span class=&#39;tooltip-text&#39;&gt;以网络服务的方式让一个由一组 Pod 构成的应用可以对外提供服务的一种方式&lt;/span&gt;
&lt;/a&gt;
名称。 如果需要，这会使得用户可以在云环境中拉取容器镜像并运行的与本地调试使用的是同一套代码。&lt;/p&gt;
&lt;p&gt;ConfigMap 并不是设计来存放大块数据。 存放于 ConfigMap 的数据不能超过 1 MiB。 如果需要存储
超过这个限制的配置数据， 可以考虑挂载一个卷，或使用独立的数据库或文件服务。&lt;/p&gt;
&lt;!--
## ConfigMap object

A ConfigMap is an API [object](/docs/concepts/overview/working-with-objects/kubernetes-objects/)
that lets you store configuration for other objects to use. Unlike most
Kubernetes objects that have a `spec`, a ConfigMap has `data` and `binaryData`
fields. These fields accepts key-value pairs as their values.  Both the `data`
field and the `binaryData` are optional. The `data` field is designed to
contain UTF-8 byte sequences while the `binaryData` field is designed to
contain binary data.

The name of a ConfigMap must be a valid
[DNS subdomain name](/docs/concepts/overview/working-with-objects/names#dns-subdomain-names).

Each key under the `data` or the `binaryData` field must consist of
alphanumeric characters, `-`, `_` or `.`. The keys stored in `data` must not
overlap with the keys in the `binaryData` field.

Starting from v1.19, you can add an `immutable` field to a ConfigMap
definition to create an [immutable ConfigMap](#configmap-immutable).
 --&gt;
&lt;h2 id=&#34;configmap-对象&#34;&gt;ConfigMap 对象&lt;/h2&gt;
&lt;p&gt;ConfigMap 是一个 API
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/overview/working-with-objects/kubernetes-objects/&#34;&gt;对象&lt;/a&gt;
, 它可以让用户存放供其它对象使用的配置信息。 与其它大多数据 k8s 对象有 &lt;code&gt;spec&lt;/code&gt; 不同， ConfigMap
包含的字段有 &lt;code&gt;data&lt;/code&gt; 和 &lt;code&gt;binaryData&lt;/code&gt;。 这些字段接受键值对作为他们的值。 &lt;code&gt;data&lt;/code&gt; 字段和
&lt;code&gt;binaryData&lt;/code&gt; 字段都是可选的。 &lt;code&gt;data&lt;/code&gt; 字段设计上是用来存储 UTF-8 字节顺序的而 &lt;code&gt;binaryData&lt;/code&gt;
字段设计上是用来存储二进制数据的。&lt;/p&gt;
&lt;p&gt;ConfigMap 的名称必须是一个有效的
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/overview/working-with-objects/names#dns-subdomain-names&#34;&gt;DNS 子域名&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; 或 &lt;code&gt;binaryData&lt;/code&gt; 字段下的键必须由字母数字，&lt;code&gt;-&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt; 或 &lt;code&gt;.&lt;/code&gt; 组成。 &lt;code&gt;data&lt;/code&gt; 存放的
键与 &lt;code&gt;binaryData&lt;/code&gt; 字段下面的键不能重复。&lt;/p&gt;
&lt;p&gt;从 k8s  v1.19 开始，可以在 ConfigMap 中添加 &lt;code&gt;immutable&lt;/code&gt; 字段，定义一个
&lt;a href=&#34;#configmap-immutable&#34;&gt;不可变的 ConfigMap&lt;/a&gt;.&lt;/p&gt;
&lt;!--
## ConfigMaps and Pods

You can write a Pod `spec` that refers to a ConfigMap and configures the container(s)
in that Pod based on the data in the ConfigMap. The Pod and the ConfigMap must be in
the same &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/overview/working-with-objects/namespaces&#39; target=&#39;_blank&#39;&gt;namespace&lt;span class=&#39;tooltip-text&#39;&gt;一个用于在同一个物理集群中支持多个虚拟集群的抽象概念&lt;/span&gt;
&lt;/a&gt;.

Here&#39;s an example ConfigMap that has some keys with single values,
and other keys where the value looks like a fragment of a configuration
format.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # property-like keys; each key maps to a simple value
  player_initial_lives: &#34;3&#34;
  ui_properties_file_name: &#34;user-interface.properties&#34;

  # file-like keys
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true
```

There are four different ways that you can use a ConfigMap to configure
a container inside a Pod:

1. Inside a container command and args
1. Environment variables for a container
1. Add a file in read-only volume, for the application to read
1. Write code to run inside the Pod that uses the Kubernetes API to read a ConfigMap

These different methods lend themselves to different ways of modeling
the data being consumed.
For the first three methods, the
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/docs/reference/generated/kubelet&#39; target=&#39;_blank&#39;&gt;kubelet&lt;span class=&#39;tooltip-text&#39;&gt;An agent that runs on each node in the cluster. It makes sure that containers are running in a pod.&lt;/span&gt;
&lt;/a&gt; uses the data from
the ConfigMap when it launches container(s) for a Pod.

The fourth method means you have to write code to read the ConfigMap and its data.
However, because you&#39;re using the Kubernetes API directly, your application can
subscribe to get updates whenever the ConfigMap changes, and react
when that happens. By accessing the Kubernetes API directly, this
technique also lets you access a ConfigMap in a different namespace.

Here&#39;s an example Pod that uses values from `game-demo` to configure a Pod:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-pod
spec:
  containers:
    - name: demo
      image: alpine
      command: [&#34;sleep&#34;, &#34;3600&#34;]
      env:
        # Define the environment variable
        - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
                                     # from the key name in the ConfigMap.
          valueFrom:
            configMapKeyRef:
              name: game-demo           # The ConfigMap this value comes from.
              key: player_initial_lives # The key to fetch.
        - name: UI_PROPERTIES_FILE_NAME
          valueFrom:
            configMapKeyRef:
              name: game-demo
              key: ui_properties_file_name
      volumeMounts:
      - name: config
        mountPath: &#34;/config&#34;
        readOnly: true
  volumes:
    # You set volumes at the Pod level, then mount them into containers inside that Pod
    - name: config
      configMap:
        # Provide the name of the ConfigMap you want to mount.
        name: game-demo
        # An array of keys from the ConfigMap to create as files
        items:
        - key: &#34;game.properties&#34;
          path: &#34;game.properties&#34;
        - key: &#34;user-interface.properties&#34;
          path: &#34;user-interface.properties&#34;
```

A ConfigMap doesn&#39;t differentiate between single line property values and
multi-line file-like values.
What matters is how Pods and other objects consume those values.

For this example, defining a volume and mounting it inside the `demo`
container as `/config` creates two files,
`/config/game.properties` and `/config/user-interface.properties`,
even though there are four keys in the ConfigMap. This is because the Pod
definition specifies an `items` array in the `volumes` section.
If you omit the `items` array entirely, every key  in the ConfigMap becomes
a file with the same name as the key, and you get 4 files.
--&gt;
&lt;h2 id=&#34;configmap-和-pod&#34;&gt;ConfigMap 和 Pod&lt;/h2&gt;
&lt;p&gt;用户可以在编写一个 Pod &lt;code&gt;spec&lt;/code&gt; 中引用一个 ConfigMap 并基于这个 ConfigMap 中的数据来配置这个
Pod 中的容器。 Pod 和 ConfigMap 必须在同一个
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/overview/working-with-objects/namespaces&#39; target=&#39;_blank&#39;&gt;命名空间(namespace)&lt;span class=&#39;tooltip-text&#39;&gt;一个用于在同一个物理集群中支持多个虚拟集群的抽象概念&lt;/span&gt;
&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;以下为一个 ConfigMap 的示例，其中包含几个有一个值的键和其它值看起来像是配置格式的片断的键&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ConfigMap&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;game-demo&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# 属性格式的键; 每个键与一个值相映射&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;player_initial_lives&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ui_properties_file_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user-interface.properties&amp;#34;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# 文件格式的键&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;game.properties&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    enemy.types=aliens,monsters
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    player.maximum-lives=5
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  user-interface.properties: |
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    color.good=purple
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    color.bad=yellow
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    allow.textmode=true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有以下四种方式可以使用 ConfigMap 配置 Pod 中的容器:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在一个容器中的命令和参数&lt;/li&gt;
&lt;li&gt;容器中的环境变量&lt;/li&gt;
&lt;li&gt;添加一个文件到一个只读卷，用于应用读取&lt;/li&gt;
&lt;li&gt;在 Pod 中写代码使用 k8s API 来读取 ConfigMap&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些不同的方式使得它们可以不用模式供给数据。
对于前三种方式
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/docs/reference/generated/kubelet&#39; target=&#39;_blank&#39;&gt;kubelet&lt;span class=&#39;tooltip-text&#39;&gt;An agent that runs on each node in the cluster. It makes sure that containers are running in a pod.&lt;/span&gt;
&lt;/a&gt; 在为 Pod 启动容器时
使用 ConfigMap 中的数据。&lt;/p&gt;
&lt;p&gt;第四种方式意味着需要用户写代理来读取 ConfigMap 和其中的数据。 但因为直接使用的是 k8s API,
应用可以通过订阅来获得 ConfigMap 变更时的更新， 并在其发生时做出反映。 通过直接访问 k8s API,
这种方式也让用户能够访问其它命名空间的 ConfigMap。&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example Pod that uses values from &lt;code&gt;game-demo&lt;/code&gt; to configure a Pod:
以下示例中的 Pod 使用 &lt;code&gt;game-demo&lt;/code&gt;  中的值来配置一个这个 Pod&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;configmap-demo-pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;demo&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;alpine&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sleep&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3600&amp;#34;&lt;/span&gt;]
      &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# 定义环境变量&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PLAYER_INITIAL_LIVES # 注意这个键与 ConfigMap 键名称是不一样的&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;configMapKeyRef&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;game-demo           # 引用 ConfigMap 的名称&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;player_initial_lives # 使用其中的键&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;UI_PROPERTIES_FILE_NAME&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;configMapKeyRef&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;game-demo&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ui_properties_file_name&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;config&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/config&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# 可以在 Pod 级别设置卷， 然后将它们挂载到容器&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;config&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;configMap&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# 想要挂载的 ConfigMap 的名称&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;game-demo&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# ConfigMap 中用来创建文件的键的列表&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;items&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;game.properties&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;game.properties&amp;#34;&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user-interface.properties&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user-interface.properties&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ConfigMap 是的单行属性值和多行的类似文件的值是没有不同的。重要的是 Pod 和其它对象是怎么使用这些值的。&lt;/p&gt;
&lt;p&gt;对于这个示例， 定义一个卷并将其挂载到 &lt;code&gt;demo&lt;/code&gt; 容器中的 &lt;code&gt;/config&lt;/code&gt; 目录，并创建两个文件，
&lt;code&gt;/config/game.properties&lt;/code&gt; 和 &lt;code&gt;/config/user-interface.properties&lt;/code&gt;, 即便 ConfigMap
中包含了四个键。 这是因为 Pod 中的 &lt;code&gt;volumes&lt;/code&gt; 区域定义一个 &lt;code&gt;items&lt;/code&gt; 数组。 如果省略了
&lt;code&gt;items&lt;/code&gt; 数组实体， 每个 ConfigMap 中的键就会变成以这个键名称一样的文件，这样就会有四个文件。&lt;/p&gt;
&lt;!--
## Using ConfigMaps

ConfigMaps can be mounted as data volumes. ConfigMaps can also be used by other
parts of the system, without being directly exposed to the Pod. For example,
ConfigMaps can hold data that other parts of the system should use for configuration.

The most common way to use ConfigMaps is to configure settings for
containers running in a Pod in the same namespace. You can also use a
ConfigMap separately.

For example, you
might encounter &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/cluster-administration/addons/&#39; target=&#39;_blank&#39;&gt;addons&lt;span class=&#39;tooltip-text&#39;&gt;扩展 k8s 功能的资源&lt;/span&gt;
&lt;/a&gt;
or &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/docs/concepts/extend-kubernetes/operator/&#39; target=&#39;_blank&#39;&gt;operators&lt;span class=&#39;tooltip-text&#39;&gt;A specialized controller used to manage a custom resource 一个用于管理自定义资源的专用控制器&lt;/span&gt;
&lt;/a&gt; that
adjust their behavior based on a ConfigMap.
 --&gt;
&lt;h2 id=&#34;使用-configmap&#34;&gt;使用 ConfigMap&lt;/h2&gt;
&lt;p&gt;ConfigMap 可以挂载为数据卷。 ConfigMap 也可以在不直接暴露给 Pod 的情况下被系统的其它部分使用。
例如， ConfigMap 可以包含系统其它部分用于檲的数据。&lt;/p&gt;
&lt;p&gt;ConfigMap 最常用的一种方式就为在同一个命名空间中的 Pod 中运行的容器提供配置。 也可以单独使用
ConfigMap&lt;/p&gt;
&lt;p&gt;例如，也可能遇到
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/cluster-administration/addons/&#39; target=&#39;_blank&#39;&gt;addons&lt;span class=&#39;tooltip-text&#39;&gt;扩展 k8s 功能的资源&lt;/span&gt;
&lt;/a&gt;
和
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/docs/concepts/extend-kubernetes/operator/&#39; target=&#39;_blank&#39;&gt;operators&lt;span class=&#39;tooltip-text&#39;&gt;A specialized controller used to manage a custom resource 一个用于管理自定义资源的专用控制器&lt;/span&gt;
&lt;/a&gt;
基于 ConfigMap 来调整他们的行为。&lt;/p&gt;
&lt;!--
### Using ConfigMaps as files from a Pod

To consume a ConfigMap in a volume in a Pod:

1. Create a ConfigMap or use an existing one. Multiple Pods can reference the
   same ConfigMap.
1. Modify your Pod definition to add a volume under `.spec.volumes[]`. Name
   the volume anything, and have a `.spec.volumes[].configMap.name` field set
   to reference your ConfigMap object.
1. Add a `.spec.containers[].volumeMounts[]` to each container that needs the
   ConfigMap. Specify `.spec.containers[].volumeMounts[].readOnly = true` and
   `.spec.containers[].volumeMounts[].mountPath` to an unused directory name
   where you would like the ConfigMap to appear.
1. Modify your image or command line so that the program looks for files in
   that directory. Each key in the ConfigMap `data` map becomes the filename
   under `mountPath`.

This is an example of a Pod that mounts a ConfigMap in a volume:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: &#34;/etc/foo&#34;
      readOnly: true
  volumes:
  - name: foo
    configMap:
      name: myconfigmap
```

Each ConfigMap you want to use needs to be referred to in `.spec.volumes`.

If there are multiple containers in the Pod, then each container needs its
own `volumeMounts` block, but only one `.spec.volumes` is needed per ConfigMap.
--&gt;
&lt;h3 id=&#34;将-configmap-以文件的方式用到-pod-中&#34;&gt;将 ConfigMap 以文件的方式用到 Pod 中&lt;/h3&gt;
&lt;p&gt;在 Pod 中以卷的方式使用一个 ConfigMap:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个新的 ConfigMap 或使用一个现有的。 多个 Pod 可以引用同一个 ConfigMap&lt;/li&gt;
&lt;li&gt;修改 Pod 定义，在 &lt;code&gt;.spec.volumes[]&lt;/code&gt; 下面添加一个卷。这卷的名称随便起， 但其中
&lt;code&gt;.spec.volumes[].configMap.name&lt;/code&gt; 字段需要设置引用上一步提到的 ConfigMap 对象&lt;/li&gt;
&lt;li&gt;在每一个需要访问这个 ConfigMap 的容器中添加 &lt;code&gt;.spec.containers[].volumeMounts[]&lt;/code&gt;。
设置 &lt;code&gt;.spec.containers[].volumeMounts[].readOnly = true&lt;/code&gt; 和
将 &lt;code&gt;.spec.containers[].volumeMounts[].mountPath&lt;/code&gt; 指向一个期望的未使用的目录名&lt;/li&gt;
&lt;li&gt;修改镜像或命令让容器中的程序查看目录中的文件。 ConfigMap 中 &lt;code&gt;data&lt;/code&gt; 字典下的每一个键就会
对应 &lt;code&gt;mountPath&lt;/code&gt; 目录中的一个文件名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面这个示例中就一个将一个 ConfigMap 挂载为卷的 Pod:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mypod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mypod&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/foo&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;configMap&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;myconfigmap&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个想要使用的 ConfigMap 都需要在 &lt;code&gt;.spec.volumes&lt;/code&gt; 中被引用。&lt;/p&gt;
&lt;p&gt;如果 Pod 中有多个容器， 每个容器都需要有自己的 &lt;code&gt;volumeMounts&lt;/code&gt; 块， 但每个 ConfigMap 只需要
一个 &lt;code&gt;.spec.volumes&lt;/code&gt;&lt;/p&gt;
&lt;!--
#### Mounted ConfigMaps are updated automatically

When a ConfigMap currently consumed in a volume is updated, projected keys are eventually updated as well.
The kubelet checks whether the mounted ConfigMap is fresh on every periodic sync.
However, the kubelet uses its local cache for getting the current value of the ConfigMap.
The type of the cache is configurable using the `ConfigMapAndSecretChangeDetectionStrategy` field in
the [KubeletConfiguration struct](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/kubelet/config/v1beta1/types.go).
A ConfigMap can be either propagated by watch (default), ttl-based, or simply redirecting
all requests directly to the API server.
As a result, the total delay from the moment when the ConfigMap is updated to the moment
when new keys are projected to the Pod can be as long as the kubelet sync period + cache
propagation delay, where the cache propagation delay depends on the chosen cache type
(it equals to watch propagation delay, ttl of cache, or zero correspondingly).

ConfigMaps consumed as environment variables are not updated automatically and require a pod restart.
 --&gt;
&lt;h4 id=&#34;让挂载的-configmap-自动更新&#34;&gt;让挂载的 ConfigMap 自动更新&lt;/h4&gt;
&lt;p&gt;当一个正在被以卷方式使用的 ConfigMap 更新时，与其相映射的键最终也会更新。 kubelet 会在每个
同步周期检查挂载的 ConfigMap 是否更新。 但是， kubelet 会使用本地缓存来获取 ConfigMap 的
当前值。 缓存的类型可以通过
&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/kubelet/config/v1beta1/types.go&#34;&gt;KubeletConfiguration struct&lt;/a&gt;.
中的 &lt;code&gt;ConfigMapAndSecretChangeDetectionStrategy&lt;/code&gt; 字段来配置。 ConfigMap 的传播方式有
监视(默认)，基于 ttl, 或简单地将所有请求直接重定向给 API server. 最终， 从 ConfigMap 更新
到新的键被投射到 Pod 中的总延时就是 kubelet 同时间隔时长 + 缓存传播延时， 而其中缓存传播延时
又基于缓存的类型(相应地它可能等于 监视传播延时，缓存的 TTL, 或零)。&lt;/p&gt;
&lt;p&gt;通过环境变量引用的 ConfigMap 是不能自动更新的，需要重启 Pod 才行。&lt;/p&gt;
&lt;!--
## Immutable ConfigMaps {#configmap-immutable}






&lt;div style=&#34;margin-top: 10px; margin-bottom: 10px;&#34;&gt;
&lt;b&gt;功能特性状态:&lt;/b&gt; &lt;code&gt;Kubernetes v1.19 [beta]&lt;/code&gt;
&lt;/div&gt;



The Kubernetes beta feature _Immutable Secrets and ConfigMaps_ provides an option to set
individual Secrets and ConfigMaps as immutable. For clusters that extensively use ConfigMaps
(at least tens of thousands of unique ConfigMap to Pod mounts), preventing changes to their
data has the following advantages:

- protects you from accidental (or unwanted) updates that could cause applications outages
- improves performance of your cluster by significantly reducing load on kube-apiserver, by
  closing watches for ConfigMaps marked as immutable.

This feature is controlled by the `ImmutableEphemeralVolumes`
[feature gate](/docs/reference/command-line-tools-reference/feature-gates/).
You can create an immutable ConfigMap by setting the `immutable` field to `true`.
For example:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  ...
data:
  ...
immutable: true
```

Once a ConfigMap is marked as immutable, it is _not_ possible to revert this change
nor to mutate the contents of the `data` or the `binaryData` field. You can
only delete and recreate the ConfigMap. Because existing Pods maintain a mount point
to the deleted ConfigMap, it is recommended to recreate these pods.
 --&gt;
&lt;h2 id=&#34;configmap-immutable&#34;&gt;不可变 ConfigMap&lt;/h2&gt;





&lt;div style=&#34;margin-top: 10px; margin-bottom: 10px;&#34;&gt;
&lt;b&gt;功能特性状态:&lt;/b&gt; &lt;code&gt;Kubernetes v1.19 [beta]&lt;/code&gt;
&lt;/div&gt;


&lt;p&gt;这个 k8s 的 bata 特性 &lt;em&gt;不可变 Secret 和 ConfigMap&lt;/em&gt; 提供了一个可选项，可以让一个 Secret
和 ConfigMap 变为不可变。 对于那些广泛使用 ConfigMap (一个 ConfigMap 至少被 10k Pod 挂载)，
防止修改它们中的数据有以下好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防止误操作(或不想要)的更新可能引发的应用事故&lt;/li&gt;
&lt;li&gt;当 ConfigMap 标记为不可变时会关闭监视，这样能极大地减少 kube-apiserver 的负载，从而改善
集群性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个特性通过设置 &lt;code&gt;ImmutableEphemeralVolumes&lt;/code&gt;
&lt;a href=&#34;https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/&#34;&gt;功能阀&lt;/a&gt;
控制。 用户可以在 ConfigMap 中通过设置 &lt;code&gt;immutable&lt;/code&gt; 字段为 &lt;code&gt;true&lt;/code&gt; 让其成功不可变 ConfigMap&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ConfigMap&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;immutable&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当一个 ConfigMap 被标记为不可变后，它就 &lt;em&gt;不&lt;/em&gt; 可能再被变会普通(可修改)的了，也不可能再修改其
中 &lt;code&gt;data&lt;/code&gt; 或 &lt;code&gt;binaryData&lt;/code&gt; 字段的值。只能删除或重建 ConfigMap。 因为现有的 Pod 会维持
对已经删除的 ConfigMap 挂载指向， 推荐对这些 Pod 也进行重建。&lt;/p&gt;
&lt;h2 id=&#34;相关资料&#34;&gt;相关资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;概念 &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/configuration/secret/&#34;&gt;Secrets&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;实践 &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/configure-pod-container/configure-pod-configmap/&#34;&gt;配置一个 Pod 使用 ConfigMap&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&#34;https://12factor.net/&#34;&gt;The Twelve-Factor App&lt;/a&gt; 以便理解分离代码和配置的动机&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Secret</title>
      <link>https://lostsquirrel.github.io/k8sDocs/docs/concepts/configuration/secret/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/docs/concepts/configuration/secret/</guid>
      <description>
        
        
        &lt;!--
---
reviewers:
- mikedanese
title: Secrets
content_type: concept
feature:
  title: Secret and configuration management
  description: &gt;
    Deploy and update secrets and application configuration without rebuilding your image and without exposing secrets in your stack configuration.
weight: 30
---
 --&gt;
&lt;!-- overview --&gt;
&lt;!--
Kubernetes Secrets let you store and manage sensitive information, such
as passwords, OAuth tokens, and ssh keys. Storing confidential information in a Secret
is safer and more flexible than putting it verbatim in a
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/concepts/workloads/pods/&#39; target=&#39;_blank&#39;&gt;Pod&lt;span class=&#39;tooltip-text&#39;&gt;Pod 表示集群中运行的一组容器的集合&lt;/span&gt;
&lt;/a&gt; definition or in a
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/.Site.baseURL/reference/glossary/?all=true#term-image&#39; target=&#39;_blank&#39;&gt;container image&lt;span class=&#39;tooltip-text&#39;&gt;一个容器的存储实例，其中包含一系列运行应用所需要的软件。&lt;/span&gt;
&lt;/a&gt;.
See [Secrets design document](https://git.k8s.io/community/contributors/design-proposals/auth/secrets.md) for more information.

A Secret is an object that contains a small amount of sensitive data such as
a password, a token, or a key. Such information might otherwise be put in a
Pod specification or in an image. Users can create Secrets and the system
also creates some Secrets.
 --&gt;
&lt;p&gt;k8s Secret 可以让用户存储和管理敏感信息，如密码, OAuth token, ssh 密钥。将私密信息放在
Secret 中更安全，并且比直接放在
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/concepts/workloads/pods/&#39; target=&#39;_blank&#39;&gt;Pod&lt;span class=&#39;tooltip-text&#39;&gt;Pod 表示集群中运行的一组容器的集合&lt;/span&gt;
&lt;/a&gt;
的配置定义中或
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/.Site.baseURL/reference/glossary/?all=true#term-image&#39; target=&#39;_blank&#39;&gt;镜像(Image)&lt;span class=&#39;tooltip-text&#39;&gt;一个容器的存储实例，其中包含一系列运行应用所需要的软件。&lt;/span&gt;
&lt;/a&gt;
中更加灵活。
更多信息见
&lt;a href=&#34;https://git.k8s.io/community/contributors/design-proposals/auth/secrets.md&#34;&gt;Secrets 设计文稿&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Secret 一个包含少量敏感信息如 如密码, OAuth token, ssh 密钥的对象。 这些信息也能被放在
Pod 的配置定义或镜像中。 用户可以创建 Secret，系统也会创建一些 Secret。&lt;/p&gt;
&lt;!-- body --&gt;
&lt;!--
## Overview of Secrets

To use a Secret, a Pod needs to reference the Secret.
A Secret can be used with a Pod in three ways:

- As [files](#using-secrets-as-files-from-a-pod) in a
  &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/storage/volumes/&#39; target=&#39;_blank&#39;&gt;volume&lt;span class=&#39;tooltip-text&#39;&gt;一个可以被 Pod 中的容器访问的包含数据的目录&lt;/span&gt;
&lt;/a&gt; mounted on one or more of
  its containers.
- As [container environment variable](#using-secrets-as-environment-variables).
- By the [kubelet when pulling images](#using-imagepullsecrets) for the Pod.

The name of a Secret object must be a valid
[DNS subdomain name](/docs/concepts/overview/working-with-objects/names#dns-subdomain-names).
You can specify the `data` and/or the `stringData` field when creating a
configuration file for a Secret.  The `data` and the `stringData` fields are optional.
The values for all keys in the `data` field have to be base64-encoded strings.
If the conversion to base64 string is not desirable, you can choose to specify
the `stringData` field instead, which accepts arbitrary strings as values.

The keys of `data` and `stringData` must consist of alphanumeric characters,
`-`, `_` or `.`. All key-value pairs in the `stringData` field are internally
merged into the `data` field. If a key appears in both the `data` and the
`stringData` field, the value specified in the `stringData` field takes
precedence.
 --&gt;
&lt;h2 id=&#34;overview-of-secrets&#34;&gt;Secret 概览&lt;/h2&gt;
&lt;p&gt;要使用 Secret 需要在 Pod 中引用这个 Secret。 Pod 可以以下三种方式 Secret:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/storage/volumes/&#39; target=&#39;_blank&#39;&gt;volume&lt;span class=&#39;tooltip-text&#39;&gt;一个可以被 Pod 中的容器访问的包含数据的目录&lt;/span&gt;
&lt;/a&gt;
中的
&lt;a href=&#34;#using-secrets-as-files-from-a-pod&#34;&gt;文件&lt;/a&gt;
挂载到一个或多个容器中。&lt;/li&gt;
&lt;li&gt;作为 &lt;a href=&#34;#using-secrets-as-environment-variables&#34;&gt;容器中的环境变量&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;通过 &lt;a href=&#34;#using-imagepullsecrets&#34;&gt;kubelet 拉取镜像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Secret 对象的名称必须是一个有效的
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/overview/working-with-objects/names#dns-subdomain-names&#34;&gt;DNS 子域名&lt;/a&gt;.
在为 Secret 创建配置文件时可以指定 &lt;code&gt;data&lt;/code&gt; 和/或 &lt;code&gt;stringData&lt;/code&gt; 字段。 &lt;code&gt;data&lt;/code&gt; 和 &lt;code&gt;stringData&lt;/code&gt;
字段都是可选的。 &lt;code&gt;data&lt;/code&gt; 字段下所有键的值都得是 base64 编码的字符串。如果不想转化为 base64
的编码字符串，则可以选择 &lt;code&gt;stringData&lt;/code&gt; 字段代替，它可以接受任意字符串作为值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; 和 &lt;code&gt;stringData&lt;/code&gt; 下面的键必须由 字母，数字， &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt; 或 &lt;code&gt;.&lt;/code&gt; 组成。 &lt;code&gt;stringData&lt;/code&gt;
字段下面的所有键值对都会内部地合并到 &lt;code&gt;data&lt;/code&gt; 字段。 如果一个键同时出现在 &lt;code&gt;data&lt;/code&gt; 和 &lt;code&gt;stringData&lt;/code&gt;
字段下面， 则 &lt;code&gt;stringData&lt;/code&gt; 字段下面指定的值有更高的优先级。&lt;/p&gt;
&lt;!--
## Types of Secret {#secret-types}

When creating a Secret, you can specify its type using the `type` field of
the [`Secret`](/docs/reference/generated/kubernetes-api/v1.19/#secret-v1-core)
resource, or certain equivalent `kubectl` command line flags (if available).
The Secret type is used to facilitate programmatic handling of the Secret data.

Kubernetes provides several builtin types for some common usage scenarios.
These types vary in terms of the validations performed and the constraints
Kubernetes imposes on them.

| Builtin Type | Usage |
|--------------|-------|
| `Opaque`     |  arbitrary user-defined data |
| `kubernetes.io/service-account-token` | service account token |
| `kubernetes.io/dockercfg` | serialized `~/.dockercfg` file |
| `kubernetes.io/dockerconfigjson` | serialized `~/.docker/config.json` file |
| `kubernetes.io/basic-auth` | credentials for basic authentication |
| `kubernetes.io/ssh-auth` | credentials for SSH authentication |
| `kubernetes.io/tls` | data for a TLS client or server |
| `bootstrap.kubernetes.io/token` | bootstrap token data |

You can define and use your own Secret type by assigning a non-empty string as the
`type` value for a Secret object. An empty string is treated as an `Opaque` type.
Kubernetes doesn&#39;t impose any constraints on the type name. However, if you
are using one of the builtin types, you must meet all the requirements defined
for that type.
 --&gt;
&lt;h2 id=&#34;secret-types&#34;&gt;Secret 的类别&lt;/h2&gt;
&lt;p&gt;在创建 Secret 时，用户通过设置
&lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#secret-v1-core&#34;&gt;&lt;code&gt;Secret&lt;/code&gt;&lt;/a&gt;
资源的 &lt;code&gt;type&lt;/code&gt; 字段指定它的类型， 或使用等同的 &lt;code&gt;kubectl&lt;/code&gt; 命令参数(如果存在)。 Secret 类型用于
帮助程式化地处理 Secret 数据。&lt;/p&gt;
&lt;p&gt;k8s 提供了几种内置的类型用于一些常见的使用场景。 这些类型不同对应不同的验证操作和对其施加不同的
约束。
&lt;blockquote&gt;
  &lt;div&gt;&lt;strong&gt;TODO: &lt;/strong&gt;说得不太清楚，需要实践理解后再考虑怎么修改&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内置类型&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Opaque&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意用户定义数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/service-account-token&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;service account token&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/dockercfg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;序列化的 &lt;code&gt;~/.dockercfg&lt;/code&gt; 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/dockerconfigjson&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;序列化的 &lt;code&gt;~/.docker/config.json&lt;/code&gt; 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/basic-auth&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基础认证的凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/ssh-auth&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SSH 认证的凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/tls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用户 TLS 客户端或服务端的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bootstrap.kubernetes.io/token&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引导 token 数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用户可以通过为 Secret 对象的 &lt;code&gt;type&lt;/code&gt; 值设置为一个非空字符串的方式定义并使用自己的 Secret 类型。
一个空字符串被认作是 &lt;code&gt;Opaque&lt;/code&gt; 类型。k8s 没有对类型的名称作任何限制。 但如果使用的是内置类型，
必须要满足这个类型的定义需求。&lt;/p&gt;
&lt;!--

### Opaque secrets

`Opaque` is the default Secret type if omitted from a Secret configuration file.
When you create a Secret using `kubectl`, you will use the `generic`
subcommand to indicate an `Opaque` Secret type. For example, the following
command creates an empty Secret of type `Opaque`.

```shell
kubectl create secret generic empty-secret
kubectl get secret empty-secret
```

The output looks like:

```
NAME           TYPE     DATA   AGE
empty-secret   Opaque   0      2m6s
```

The `DATA` column shows the number of data items stored in the Secret.
In this case, `0` means we have just created an empty Secret.
 --&gt;
&lt;h3 id=&#34;opaque-secrets&#34;&gt;Opaque 类别 Secret&lt;/h3&gt;
&lt;p&gt;如果 Secret 配置文件中没有定义 Secret 类型则 &lt;code&gt;Opaque&lt;/code&gt; 就是默认类型。 当使用 &lt;code&gt;kubectl&lt;/code&gt; 创建
Secret, 可以使用 &lt;code&gt;generic&lt;/code&gt; 子命令来表示 &lt;code&gt;Opaque&lt;/code&gt; Secret 类型。 例如，以下命令会创建一个
类型为 &lt;code&gt;Opaque&lt;/code&gt; 空 Secret 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl create secret generic empty-secret
kubectl get secret empty-secret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NAME           TYPE     DATA   AGE
empty-secret   Opaque   0      2m6s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;DATA&lt;/code&gt; 列显示的是 Secret 中存储的数据条目数。 在这种情况下， &lt;code&gt;0&lt;/code&gt; 表示这里创建的是一个空的 Secret&lt;/p&gt;
&lt;!--
###  Service account token Secrets

A `kubernetes.io/service-account-token` type of Secret is used to store a
token that identifies a service account. When using this Secret type, you need
to ensure that the `kubernetes.io/service-account.name` annotation is set to an
existing service account name. An Kubernetes controller fills in some other
fields such as the `kubernetes.io/service-account.uid` annotation and the
`token` key in the `data` field set to actual token content.

The following example configuration declares a service account token Secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: secret-sa-sample
  annotations:
    kubernetes.io/service-account.name: &#34;sa-name&#34;
type: kubernetes.io/service-account-token
data:
  # You can include additional key value pairs as you do with Opaque Secrets
  extra: YmFyCg==
```

When creating a `Pod`, Kubernetes automatically creates a service account Secret
and automatically modifies your Pod to use this Secret. The service account token
Secret contains credentials for accessing the API.

The automatic creation and use of API credentials can be disabled or
overridden if desired. However, if all you need to do is securely access the
API server, this is the recommended workflow.

See the [ServiceAccount](/docs/tasks/configure-pod-container/configure-service-account/)
documentation for more information on how service accounts work.
You can also check the `automountServiceAccountToken` field and the
`serviceAccountName` field of the
[`Pod`](/docs/reference/generated/kubernetes-api/v1.19/#pod-v1-core)
for information on referencing service account from Pods.
 --&gt;
&lt;h3 id=&#34;service-account-token-secrets&#34;&gt;服务账号(Service account) token 类别 Secret&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kubernetes.io/service-account-token&lt;/code&gt; 类型的 Secret 用于存储一个鉴定服务账号(service account)的 token.
当使用这个 Secret 类别时， 需要保证 &lt;code&gt;kubernetes.io/service-account.name&lt;/code&gt; 注解设置为一
个现有的服务账号(service account)名称. 一个 k8s 控制会填充其它字段，如
&lt;code&gt;kubernetes.io/service-account.uid&lt;/code&gt; 注解， &lt;code&gt;data&lt;/code&gt; 字段中的 &lt;code&gt;token&lt;/code&gt; 键设置实际 token
的内容。&lt;/p&gt;
&lt;p&gt;The following example configuration declares a service account token Secret:
下面的例子中定义了一个 服务账号(service account) token 类别的 Secret:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-sa-sample&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/service-account.name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sa-name&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes.io/service-account-token&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# 可以与 Opaque 类别的 Secret 一样添加更多的键值对&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;extra&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;YmFyCg==&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当创建一个 &lt;code&gt;Pod&lt;/code&gt; 时， k8s 会自动地创建一个服务账号 Secret 再自动修改 Pod 来使用这个 Secret.
这个 服务账号(service account) token 中包含了访问 API 的凭据。&lt;/p&gt;
&lt;p&gt;如果需要可以禁用或覆盖这种自动创建和使用 API 凭据的行为。 但是，如果仅需要安全地访问 API 服务，
这种是推荐的工作方式。&lt;/p&gt;
&lt;p&gt;更多关于服务账号是工件的信息见
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/tasks/configure-pod-container/configure-service-account/&#34;&gt;ServiceAccount&lt;/a&gt;。
也可以查看
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/reference/generated/kubernetes-api/v1.19/#pod-v1-core&#34;&gt;&lt;code&gt;Pod&lt;/code&gt;&lt;/a&gt;
中的 &lt;code&gt;automountServiceAccountToken&lt;/code&gt; 和 &lt;code&gt;serviceAccountName&lt;/code&gt; 字段了解 Pod 中引用的
服务账号的信息。&lt;/p&gt;
&lt;!--
### Docker config Secrets

You can use one of the following `type` values to create a Secret to
store the credentials for accessing a Docker registry for images.

- `kubernetes.io/dockercfg`
- `kubernetes.io/dockerconfigjson`

The `kubernetes.io/dockercfg` type is reserved to store a serialized
`~/.dockercfg` which is the legacy format for configuring Docker command line.
When using this Secret type, you have to ensure the Secret `data` field
contains a `.dockercfg` key whose value is content of a `~/.dockercfg` file
encoded in the base64 format.

The `kubernetes.io/dockerconfigjson` type is designed for storing a serialized
JSON that follows the same format rules as the `~/.docker/config.json` file
which is a new format for `~/.dockercfg`.
When using this Secret type, the `data` field of the Secret object must
contain a `.dockerconfigjson` key, in which the content for the
`~/.docker/config.json` file is provided as a base64 encoded string.

Below is an example for a `kubernetes.io/dockercfg` type of Secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: secret-dockercfg
type: kubernetes.io/dockercfg
data:
  .dockercfg: |
    &#34;&lt;base64 encoded ~/.dockercfg file&gt;&#34;
```

&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; If you do not want to perform the base64 encoding, you can choose to use the
&lt;code&gt;stringData&lt;/code&gt; field instead.&lt;/div&gt;
&lt;/blockquote&gt;


When you create these types of Secrets using a manifest, the API
server checks whether the expected key does exists in the `data` field, and
it verifies if the value provided can be parsed as a valid JSON. The API
server doesn&#39;t validate if the JSON actually is a Docker config file.

When you do not have a Docker config file, or you want to use `kubectl`
to create a Docker registry Secret, you can do:

```shell
kubectl create secret docker-registry secret-tiger-docker \
  --docker-username=tiger \
  --docker-password=pass113 \
  --docker-email=tiger@acme.com
```

This command creates a Secret of type `kubernetes.io/dockerconfigjson`.
If you dump the `.dockerconfigjson` content from the `data` field, you will
get the following JSON content which is a valid Docker configuration created
on the fly:

```json
{
  &#34;auths&#34;: {
    &#34;https://index.docker.io/v1/&#34;: {
      &#34;username&#34;: &#34;tiger&#34;,
      &#34;password&#34;: &#34;pass113&#34;,
      &#34;email&#34;: &#34;tiger@acme.com&#34;,
      &#34;auth&#34;: &#34;dGlnZXI6cGFzczExMw==&#34;
    }
  }
}
```
 --&gt;
&lt;h3 id=&#34;docker-config-Secrets&#34;&gt;Docker 配置 Secret&lt;/h3&gt;
&lt;p&gt;用户可以使用以下 &lt;code&gt;type&lt;/code&gt; 值来创建存储访问 Docker 镜像仓库的凭据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubernetes.io/dockercfg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubernetes.io/dockerconfigjson&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;kubernetes.io/dockercfg&lt;/code&gt; 类别是存储序列化 &lt;code&gt;~/.dockercfg&lt;/code&gt; 文件的保留类别， 其中存放的
是配置 Docker 命令行的经典格式。 当使用这个 Secret 类别时， 需要确保 &lt;code&gt;data&lt;/code&gt; 字段中包含
一个 &lt;code&gt;.dockercfg&lt;/code&gt; 键，并且它的值就是一个 &lt;code&gt;~/.dockercfg&lt;/code&gt; 内容的 base64 编码格式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubernetes.io/dockerconfigjson&lt;/code&gt;  类别被设计用来存储序列化 JSON, 其格式规则与
&lt;code&gt;~/.docker/config.json&lt;/code&gt; 文件一样, 也就是 &lt;code&gt;~/.dockercfg&lt;/code&gt; 的新格式。
当使用这个 Secret 类别时， Secret 对象的 &lt;code&gt;data&lt;/code&gt; 字段必须包含一个 &lt;code&gt;.dockerconfigjson&lt;/code&gt; 键
，其中的内容是 &lt;code&gt;~/.docker/config.json&lt;/code&gt; 文件内容 base64 编码字符串&lt;/p&gt;
&lt;p&gt;Below is an example for a &lt;code&gt;kubernetes.io/dockercfg&lt;/code&gt; type of Secret:
下面是一个 &lt;code&gt;kubernetes.io/dockercfg&lt;/code&gt; 类别 Secret 的示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-dockercfg&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes.io/dockercfg&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;.dockercfg&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;lt;base64 encoded ~/.dockercfg file&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; 如果不想要执行 base64 编码，则可以使用 &lt;code&gt;stringData&lt;/code&gt; 字段，而不是 &lt;code&gt;data&lt;/code&gt; 字段&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;在创建这些类别的 Secret 时，API 服务会检查其中的键是否是 &lt;code&gt;data&lt;/code&gt; 字段中存在。并且会验证提供
的值是否能解析为有效的 JSON. 但 API 服务不会验证这个 JSON 实际上是不是一个 Docker 配置文件。&lt;/p&gt;
&lt;p&gt;当在没有 Docker 配置文件时，可以使用 &lt;code&gt;kubectl&lt;/code&gt; 创建一个 Docker 镜像仓库凭据 Secret， 例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl create secret docker-registry secret-tiger-docker &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --docker-username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tiger &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --docker-password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pass113 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --docker-email&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tiger@acme.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个命令会创建一个 &lt;code&gt;kubernetes.io/dockerconfigjson&lt;/code&gt; 类别的 Secret。如果将 &lt;code&gt;.dockerconfigjson&lt;/code&gt;
&lt;code&gt;data&lt;/code&gt; 字段转存，就会得到新创建的一个 JSON 格式的有效的 Docker 配置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;auths&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;https://index.docker.io/v1/&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tiger&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pass113&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tiger@acme.com&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;auth&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dGlnZXI6cGFzczExMw==&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--
### Basic authentication Secret

The `kubernetes.io/basic-auth` type is provided for storing credentials needed
for basic authentication. When using this Secret type, the `data` field of the
Secret must contain the following two keys:

- `username`: the user name for authentication;
- `password`: the password or token for authentication.

Both values for the above two keys are base64 encoded strings. You can, of
course, provide the clear text content using the `stringData` for Secret
creation.

The following YAML is an example config for a basic authentication Secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: secret-basic-auth
type: kubernetes.io/basic-auth
stringData:
  username: admin
  password: t0p-Secret
```

The basic authentication Secret type is provided only for user&#39;s convenience.
You can create an `Opaque` for credentials used for basic authentication.
However, using the builtin Secret type helps unify the formats of your credentials
and the API server does verify if the required keys are provided in a Secret
configuration.
 --&gt;
&lt;h3 id=&#34;基础认证-secret&#34;&gt;基础认证 Secret&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kubernetes.io/basic-auth&lt;/code&gt; 类别的 Secret 是用来存储基础认证所需的凭据的。 当使用这个
Secret 类别时， Secret 的 &lt;code&gt;data&lt;/code&gt; 字段必须要包含以下两个键:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt;: 认证的用户名;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt;: 认证的密码或 token.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下两个键的值都需要进行 base64 编码。 也可以在创建 Secret 使用 &lt;code&gt;stringData&lt;/code&gt; 这样就可以在
直接使用明文的键值。&lt;/p&gt;
&lt;p&gt;以下 YAML 就是一个基础认证 Secret 的示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-basic-auth&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes.io/basic-auth&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;stringData&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;admin&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;t0p-Secret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提供基础认证类型的 Secret 只是为了用户方便。 也可以创建一个 &lt;code&gt;Opaque&lt;/code&gt; 类别的 Secret 来存储
基础认证的凭据。 但使用内置的 Secret 类别有助于统一凭据格式并且 API 服务也会验证 Secret 配置
中是否提供了需要的键。&lt;/p&gt;
&lt;!--
### SSH authentication secrets

The builtin type `kubernetes.io/ssh-auth` is provided for storing data used in
SSH authentication. When using this Secret type, you will have to specify a
`ssh-privatekey` key-value pair in the `data` (or `stringData`) field
as the SSH credential to use.

The following YAML is an example config for a SSH authentication Secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: secret-ssh-auth
type: kubernetes.io/ssh-auth
data:
  # the data is abbreviated in this example
  ssh-privatekey: |
     MIIEpQIBAAKCAQEAulqb/Y ...
```

The SSH authentication Secret type is provided only for user&#39;s convenience.
You can create an `Opaque` for credentials used for SSH authentication.
However, using the builtin Secret type helps unify the formats of your credentials
and the API server does verify if the required keys are provided in a Secret
configuration.

&lt;blockquote class=&#34;caution&#34;&gt;
  &lt;div&gt;&lt;strong&gt;注意：&lt;/strong&gt; SSH private keys do not establish trusted communication between an SSH client and
host server on their own. A secondary means of establishing trust is needed to
mitigate &amp;ldquo;man in the middle&amp;rdquo; attacks, such as a &lt;code&gt;known_hosts&lt;/code&gt; file added to a
ConfigMap.&lt;/div&gt;
&lt;/blockquote&gt;

 --&gt;
&lt;!--
### SSH authentication secrets

The builtin type `kubernetes.io/ssh-auth` is provided for storing data used in
SSH authentication. When using this Secret type, you will have to specify a
`ssh-privatekey` key-value pair in the `data` (or `stringData`) field
as the SSH credential to use.

The following YAML is an example config for a SSH authentication Secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: secret-ssh-auth
type: kubernetes.io/ssh-auth
data:
  # the data is abbreviated in this example
  ssh-privatekey: |
     MIIEpQIBAAKCAQEAulqb/Y ...
```

The SSH authentication Secret type is provided only for user&#39;s convenience.
You can create an `Opaque` for credentials used for SSH authentication.
However, using the builtin Secret type helps unify the formats of your credentials
and the API server does verify if the required keys are provided in a Secret
configuration.

&lt;blockquote class=&#34;caution&#34;&gt;
  &lt;div&gt;&lt;strong&gt;注意：&lt;/strong&gt; SSH private keys do not establish trusted communication between an SSH client and
host server on their own. A secondary means of establishing trust is needed to
mitigate &amp;ldquo;man in the middle&amp;rdquo; attacks, such as a &lt;code&gt;known_hosts&lt;/code&gt; file added to a
ConfigMap.&lt;/div&gt;
&lt;/blockquote&gt;

 --&gt;
&lt;h3 id=&#34;ssh-authentication-secrets&#34;&gt;SSH 认证 Secret&lt;/h3&gt;
&lt;p&gt;内置的 &lt;code&gt;kubernetes.io/ssh-auth&lt;/code&gt; 类别的 Secret 是用于存储 SSH 认证数据的。 当使用该类别
Secret 时， 需要在 &lt;code&gt;data&lt;/code&gt; (或 &lt;code&gt;stringData&lt;/code&gt;)指定用于 SSH 认证的键值对，其中键为 &lt;code&gt;ssh-privatekey&lt;/code&gt;
值为私钥的内容&lt;/p&gt;
&lt;p&gt;下面的 YAML 就是一个 SSH 认证 Secret 的配置示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-ssh-auth&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes.io/ssh-auth&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# 示例中省略了部分数据&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ssh-privatekey&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     MIIEpQIBAAKCAQEAulqb/Y ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提供 SSH 认证 Secret 只是为了用户方便。 也可以创建一个 &lt;code&gt;Opaque&lt;/code&gt; 类别的 Secret 来存储
SSH 认证的凭据。 但使用内置的 Secret 类别有助于统一凭据格式并且 API 服务也会验证 Secret 配置
中是否提供了需要的键。&lt;/p&gt;
&lt;blockquote class=&#34;caution&#34;&gt;
  &lt;div&gt;&lt;strong&gt;注意：&lt;/strong&gt; SSH 私钥并不能独立在 SSH 客户端和服务端之间建议安全连接。 一种建立安全连接辅助方式能降低&amp;quot;中间人&amp;quot;攻击的可能，
例如将 &lt;code&gt;known_hosts&lt;/code&gt; 文件添加到 ConfigMap&lt;/div&gt;
&lt;/blockquote&gt;

&lt;!--
### TLS secrets

Kubernetes provides a builtin Secret type `kubernetes.io/tls` for to storing
a certificate and its associated key that are typically used for TLS . This
data is primarily used with TLS termination of the Ingress resource, but may
be used with other resources or directly by a workload.
When using this type of Secret, the `tls.key` and the `tls.crt` key must be provided
in the `data` (or `stringData`) field of the Secret configuration, although the API
server doesn&#39;t actually validate the values for each key.

The following YAML contains an example config for a TLS Secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: secret-tls
type: kubernetes.io/tls
data:
  # the data is abbreviated in this example
  tls.crt: |
    MIIC2DCCAcCgAwIBAgIBATANBgkqh ...
  tls.key: |
    MIIEpgIBAAKCAQEA7yn3bRHQ5FHMQ ...
```

The TLS Secret type is provided for user&#39;s convenience. You can create an `Opaque`
for credentials used for TLS server and/or client. However, using the builtin Secret
type helps ensure the consistency of Secret format in your project; the API server
does verify if the required keys are provided in a Secret configuration.

When creating a TLS Secret using `kubectl`, you can use the `tls` subcommand
as shown in the following example:

```shell
kubectl create secret tls my-tls-secret \
  --cert=path/to/cert/file \
  --key=path/to/key/file
```

The public/private key pair must exist before hand. The public key certificate
for `--cert` must be .PEM encoded (Base64-encoded DER format), and match the
given private key for `--key`.
The private key must be in what is commonly called PEM private key format,
unencrypted. In both cases, the initial and the last lines from PEM (for
example, `--------BEGIN CERTIFICATE-----` and `-------END CERTIFICATE----` for
a cetificate) are *not* included.
 --&gt;
&lt;h3 id=&#34;tls-secrets&#34;&gt;TLS Secret&lt;/h3&gt;
&lt;p&gt;k8s 提供了内置的 &lt;code&gt;kubernetes.io/tls&lt;/code&gt; Secret 类别用在存储 TLS 通常使用的证书和对应的 key.
这些数据主要用于 Ingress 资源的 TLS 终结，但可能被其它资源使用或直接被工作负载使用。 当使用
该类另的 Secret 时，在 Secret 配置的 &lt;code&gt;data&lt;/code&gt; (或 &lt;code&gt;stringData&lt;/code&gt;) 字段中必须要提供 &lt;code&gt;tls.key&lt;/code&gt;
和 &lt;code&gt;tls.crt&lt;/code&gt; 这两个键，尽管 API 服务实际上是不验证这些键的。&lt;/p&gt;
&lt;p&gt;The following YAML contains an example config for a TLS Secret:
下面的 YAML 中包含了一个 TLS Secret 的示例配置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-tls&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes.io/tls&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# 下面的示例数据部分省略&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;tls.crt&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    MIIC2DCCAcCgAwIBAgIBATANBgkqh ...
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  tls.key: |
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    MIIEpgIBAAKCAQEA7yn3bRHQ5FHMQ ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提供 TLS Secret 只是为了用户方便。 也可以创建一个 &lt;code&gt;Opaque&lt;/code&gt; 类别的 Secret 来存储
TLS 服务端和/或客户端的凭据。 但使用内置的 Secret 类别有助于统一凭据格式并且 API 服务也会
验证 Secret 配置中是否提供了需要的键。&lt;/p&gt;
&lt;p&gt;在使用 &lt;code&gt;kubectl&lt;/code&gt; 创建 TLS Secret，可以使用 &lt;code&gt;tls&lt;/code&gt; 子命令，见下面的例子:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl create secret tls my-tls-secret &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --cert&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;path/to/cert/file &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;path/to/key/file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;公钥/私钥对必须要先准备好。 &lt;code&gt;--cert&lt;/code&gt; 使用的公钥证书必要是 .PEM 编码(Base64-encoded DER 格式)，
并且与 &lt;code&gt;--key&lt;/code&gt; 中提供的私钥匹配。 私钥也必须以常见的 PEM 私钥格式提供， 不加密。
对于两个键， PEM 的首尾行(就如证书的 &lt;code&gt;--------BEGIN CERTIFICATE-----&lt;/code&gt; 和
&lt;code&gt;-------END CERTIFICATE----&lt;/code&gt;)是 &lt;em&gt;不&lt;/em&gt; 包含在内的。&lt;/p&gt;
&lt;!--
### Bootstrap token Secrets

A bootstrap token Secret can be created by explicitly specifying the Secret
`type` to `bootstrap.kubernetes.io/token`. This type of Secret is designed for
tokens used during the node bootstrap process. It stores tokens used to sign
well known ConfigMaps.

A bootstrap token Secret is usually created in the `kube-system` namespace and
named in the form `bootstrap-token-&lt;token-id&gt;` where `&lt;token-id&gt;` is a 6 character
string of the token ID.

As a Kubernetes manifest, a bootstrap token Secret might look like the
following:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: bootstrap-token-5emitj
  namespace: kube-system
type: bootstrap.kubernetes.io/token
data:
  auth-extra-groups: c3lzdGVtOmJvb3RzdHJhcHBlcnM6a3ViZWFkbTpkZWZhdWx0LW5vZGUtdG9rZW4=
  expiration: MjAyMC0wOS0xM1QwNDozOToxMFo=
  token-id: NWVtaXRq
  token-secret: a3E0Z2lodnN6emduMXAwcg==
  usage-bootstrap-authentication: dHJ1ZQ==
  usage-bootstrap-signing: dHJ1ZQ==
```

A bootstrap type Secret has the following keys specified under `data`:

- `token_id`: A random 6 character string as the token identifier. Required.
- `token-secret`: A random 16 character string as the actual token secret. Required.
- `description`: A human-readable string that describes what the token is
  used for. Optional.
- `expiration`: An absolute UTC time using RFC3339 specifying when the token
  should be expired. Optional.
- `usage-bootstrap-&lt;usage&gt;`: A boolean flag indicating additional usage for
  the bootstrap token.
- `auth-extra-groups`: A comma-separated list of group names that will be
  authenticated as in addition to the `system:bootstrappers` group.

The above YAML may look confusing because the values are all in base64 encoded
strings. In fact, you can create an identical Secret using the following YAML:

```yaml
apiVersion: v1
kind: Secret
metadata:
  # Note how the Secret is named
  name: bootstrap-token-5emitj
  # A bootstrap token Secret usually resides in the kube-system namespace
  namespace: kube-system
type: bootstrap.kubernetes.io/token
stringData:
  auth-extra-groups: &#34;system:bootstrappers:kubeadm:default-node-token&#34;
  expiration: &#34;2020-09-13T04:39:10Z&#34;
  # This token ID is used in the name
  token-id: &#34;5emitj&#34;
  token-secret: &#34;kq4gihvszzgn1p0r&#34;
  # This token can be used for authentication
  usage-bootstrap-authentication: &#34;true&#34;
  # and it can be used for signing
  usage-bootstrap-signing: &#34;true&#34;
```
 --&gt;
&lt;h3 id=&#34;bootstrap-token-secrets&#34;&gt;引导令牌 Secret&lt;/h3&gt;
&lt;p&gt;引导令牌 Secret 可以通过显示地将 Secret 的 &lt;code&gt;type&lt;/code&gt; 设置为 &lt;code&gt;bootstrap.kubernetes.io/token&lt;/code&gt;
来创建. 这个 Secret 类别是设计来存储节点引导进程所使用的令牌的。 它存储的令牌是用来签发认可
的 ConfigMap 的。&lt;/p&gt;
&lt;p&gt;引导令牌 Secret 通常是创建在 &lt;code&gt;kube-system&lt;/code&gt; 命名空间中， 命名格式为 &lt;code&gt;bootstrap-token-&amp;lt;token-id&amp;gt;&lt;/code&gt;
其中 &lt;code&gt;&amp;lt;token-id&amp;gt;&lt;/code&gt; 是一个 6 字符的令牌 ID。&lt;/p&gt;
&lt;p&gt;一个引导令牌 Secret 可能就长成下面的这个梯子:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bootstrap-token-5emitj&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kube-system&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bootstrap.kubernetes.io/token&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;auth-extra-groups&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;c3lzdGVtOmJvb3RzdHJhcHBlcnM6a3ViZWFkbTpkZWZhdWx0LW5vZGUtdG9rZW4=&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;expiration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MjAyMC0wOS0xM1QwNDozOToxMFo=&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;token-id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NWVtaXRq&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;token-secret&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;a3E0Z2lodnN6emduMXAwcg==&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;usage-bootstrap-authentication&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dHJ1ZQ==&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;usage-bootstrap-signing&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dHJ1ZQ==&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个引导令牌 Secret 的 &lt;code&gt;data&lt;/code&gt;字段下有如下字段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;token-id&lt;/code&gt;: 一个 6 字符随机字符串作为令牌 ID. 必要.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;token-secret&lt;/code&gt;: 一个 16 字符随机字符串，作为真正的令牌秘文. 必要.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;description&lt;/code&gt;: 一个人类可读的字符串，描述令牌是用来做啥的。 可选&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;expiration&lt;/code&gt;: 一个绝对 UTF 时间，使用 RFC3339， 指定令牌啥时候过期。可选&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;usage-bootstrap-&amp;lt;usage&amp;gt;&lt;/code&gt;: 一个布尔标示，用来指示这个引导令牌附加使用信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auth-extra-groups&lt;/code&gt;: 一个逗号分隔的组名称列表，用来认证 &lt;code&gt;system:bootstrappers&lt;/code&gt; 打头的组&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的 YAML 因为值都是 base64 编码的，看起来有点晕。实际上可以使用以下 YAML 创建一个与它一样
的 Secret:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# 注意 Secret 是怎么命名的&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bootstrap-token-5emitj&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# 引导令牌 Secret 通常都是在 kube-system 命名空间中&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kube-system&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bootstrap.kubernetes.io/token&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;stringData&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;auth-extra-groups&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;system:bootstrappers:kubeadm:default-node-token&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;expiration&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-09-13T04:39:10Z&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# 这个 令牌 ID 被用在名称上&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;token-id&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5emitj&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;token-secret&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kq4gihvszzgn1p0r&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# 这个令牌可以被用作认证&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;usage-bootstrap-authentication&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# 也可以被用来签名&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;usage-bootstrap-signing&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--
## Creating a Secret

There are several options to create a Secret:

- [create Secret using `kubectl` command](/docs/tasks/configmap-secret/managing-secret-using-kubectl/)
- [create Secret from config file](/docs/tasks/configmap-secret/managing-secret-using-config-file/)
- [create Secret using kustomize](/docs/tasks/configmap-secret/managing-secret-using-kustomize/)
 --&gt;
&lt;h2 id=&#34;creating-a-secret&#34;&gt;创建 Secret&lt;/h2&gt;
&lt;p&gt;There are several options to create a Secret:
有几种创建 Secret 方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/configmap-secret/managing-secret-using-kubectl/&#34;&gt;使用 &lt;code&gt;kubectl&lt;/code&gt; 命令创建 Secret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/configmap-secret/managing-secret-using-config-file/&#34;&gt;通过配置文件创建 Secret &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/configmap-secret/managing-secret-using-kustomize/&#34;&gt;使用 kustomize 创建 Secret&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
## Editing a Secret

An existing Secret may be edited with the following command:

```shell
kubectl edit secrets mysecret
```

This will open the default configured editor and allow for updating the base64 encoded Secret values in the `data` field:

```yaml
# Please edit the object below. Lines beginning with a &#39;#&#39; will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: v1
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm
kind: Secret
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: { ... }
  creationTimestamp: 2016-01-22T18:41:56Z
  name: mysecret
  namespace: default
  resourceVersion: &#34;164619&#34;
  uid: cfee02d6-c137-11e5-8d73-42010af00002
type: Opaque
```
 --&gt;
&lt;h2 id=&#34;editing-a-secret&#34;&gt;编辑 Secret&lt;/h2&gt;
&lt;p&gt;An existing Secret may be edited with the following command:
可以通过以下命令修改一个现有的 Secret:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl edit secrets mysecret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will open the default configured editor and allow for updating the base64 encoded Secret values in the &lt;code&gt;data&lt;/code&gt; field:
这会打开默认编辑器，并允许对 &lt;code&gt;data&lt;/code&gt; 字段下面  base64 编辑的 Secret 进行修改:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 请绑架下面的对象，以 &amp;#39;#&amp;#39; 开头的行会被忽略，&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 一个空文件会中止编辑。 如果保存时发生错误就会响应相应的失败信息&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;YWRtaW4=&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MWYyZDFlMmU2N2Rm&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;kubectl.kubernetes.io/last-applied-configuration&lt;/span&gt;: { &lt;span style=&#34;color:#ae81ff&#34;&gt;... }&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;creationTimestamp&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;2016-01-22T18:41:56Z&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecret&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;resourceVersion&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;164619&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;uid&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cfee02d6-c137-11e5-8d73-42010af00002&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Opaque&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--
## Using Secrets

Secrets can be mounted as data volumes or exposed as
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/containers/container-environment/&#39; target=&#39;_blank&#39;&gt;environment variables&lt;span class=&#39;tooltip-text&#39;&gt;容器环境变量是 name=value 对，用来给 Pod 中运行的容器提供有用的信息&lt;/span&gt;
&lt;/a&gt;
to be used by a container in a Pod. Secrets can also be used by other parts of the
system, without being directly exposed to the Pod. For example, Secrets can hold
credentials that other parts of the system should use to interact with external
systems on your behalf.
 --&gt;
&lt;h2 id=&#34;using-secrets&#34;&gt;使用 Secret&lt;/h2&gt;
&lt;p&gt;Secret 可以挂载为数据卷或暴露为
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/containers/container-environment/&#39; target=&#39;_blank&#39;&gt;容器环境变量&lt;span class=&#39;tooltip-text&#39;&gt;容器环境变量是 name=value 对，用来给 Pod 中运行的容器提供有用的信息&lt;/span&gt;
&lt;/a&gt;
以供 Pod 中的容器使用。 Secret 也可以被系统的其它部分使用，而不需要直接暴露给 Pod。 例如，
Secret 可以存储系统其它部分与外部系统交互时需要用到的凭据。&lt;/p&gt;
&lt;!--
### Using Secrets as files from a Pod

To consume a Secret in a volume in a Pod:

1. Create a secret or use an existing one. Multiple Pods can reference the same secret.
1. Modify your Pod definition to add a volume under `.spec.volumes[]`. Name the volume anything, and have a `.spec.volumes[].secret.secretName` field equal to the name of the Secret object.
1. Add a `.spec.containers[].volumeMounts[]` to each container that needs the secret. Specify `.spec.containers[].volumeMounts[].readOnly = true` and `.spec.containers[].volumeMounts[].mountPath` to an unused directory name where you would like the secrets to appear.
1. Modify your image or command line so that the program looks for files in that directory. Each key in the secret `data` map becomes the filename under `mountPath`.

This is an example of a Pod that mounts a Secret in a volume:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: &#34;/etc/foo&#34;
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: mysecret
```

Each Secret you want to use needs to be referred to in `.spec.volumes`.

If there are multiple containers in the Pod, then each container needs its
own `volumeMounts` block, but only one `.spec.volumes` is needed per Secret.

You can package many files into one secret, or use many secrets, whichever is convenient.
 --&gt;
&lt;h3 id=&#34;using-secrets-as-files-from-a-pod&#34;&gt;将 Secret 用作 Pod 中的文件&lt;/h3&gt;
&lt;p&gt;在 Pod 中以卷的方式使用 Secret:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建或使用一个现有的 Secret. 多个 Pod 可以引用同一个 Secret.&lt;/li&gt;
&lt;li&gt;修改 Pod 定义， 在 &lt;code&gt;.spec.volumes[]&lt;/code&gt; 下面添加一个卷。 卷名随便起，但其中的
&lt;code&gt;.spec.volumes[].secret.secretName&lt;/code&gt; 字段的值需要是 Secret 对象的名称。&lt;/li&gt;
&lt;li&gt;在每个需要 Secret 的容器中添加一个 &lt;code&gt;.spec.containers[].volumeMounts[]&lt;/code&gt;。 指定
&lt;code&gt;.spec.containers[].volumeMounts[].readOnly = true&lt;/code&gt;
和
&lt;code&gt;.spec.containers[].volumeMounts[].mountPath&lt;/code&gt; 指向一个期望的未使用的位置&lt;/li&gt;
&lt;li&gt;修改镜像或命令行，让程序查找目录中的文件。 Secret &lt;code&gt;data&lt;/code&gt; 字段下的每一个键都会投射为
&lt;code&gt;mountPath&lt;/code&gt; 目录中的一个文件名。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个将 Secret 挂载为卷的 Pod 的示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mypod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mypod&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/foo&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每一个想要使用的 Secret 都需要在 &lt;code&gt;.spec.volumes&lt;/code&gt; 中引用。&lt;/p&gt;
&lt;p&gt;如果 Pod 中有多个容器， 则每个容器需要各自的 &lt;code&gt;volumeMounts&lt;/code&gt; 块， 但每个 Secret 只需要一个
&lt;code&gt;.spec.volumes&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;用户可以将多个文件放在一个 Secret 中，或使用多个 Secret, 哪个方便用哪个。&lt;/p&gt;
&lt;!--
#### Projection of Secret keys to specific paths

You can also control the paths within the volume where Secret keys are projected.
You can use the `.spec.volumes[].secret.items` field to change the target path of each key:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: &#34;/etc/foo&#34;
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: mysecret
      items:
      - key: username
        path: my-group/my-username
```

What will happen:

* `username` secret is stored under `/etc/foo/my-group/my-username` file instead of `/etc/foo/username`.
* `password` secret is not projected.

If `.spec.volumes[].secret.items` is used, only keys specified in `items` are projected.
To consume all keys from the secret, all of them must be listed in the `items` field.
All listed keys must exist in the corresponding secret. Otherwise, the volume is not created.
 --&gt;
&lt;h4 id=&#34;projection-of-secret-keys-to-specific-paths&#34;&gt;将 Secret 的键投射到指定目录&lt;/h4&gt;
&lt;p&gt;用户可以控制 Secret 键投射到卷中的哪个目录。
通过 &lt;code&gt;.spec.volumes[].secret.items&lt;/code&gt; 字段就可以修改每个键的目标路径:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mypod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mypod&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/foo&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecret&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;items&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;username&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-group/my-username&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果表现为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; 秘文就是存储在 &lt;code&gt;/etc/foo/my-group/my-username&lt;/code&gt; 而不是 &lt;code&gt;/etc/foo/username&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt; 秘文则不会投射&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果使用了 &lt;code&gt;.spec.volumes[].secret.items&lt;/code&gt;，则只有在 &lt;code&gt;items&lt;/code&gt; 中指定的键才会被投射。
要使用 Secret 中所有键，则需要在  &lt;code&gt;items&lt;/code&gt; 字段把它们全部列举。
所有列表的键都必须要在对应的 Secret 存在，否则，卷不能被创建。&lt;/p&gt;
&lt;!--
#### Secret files permissions

You can set the file access permission bits for a single Secret key.
If you don&#39;t specify any permissions, `0644` is used by default.
You can also set a default mode for the entire Secret volume and override per key if needed.

For example, you can specify a default mode like this:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: &#34;/etc/foo&#34;
  volumes:
  - name: foo
    secret:
      secretName: mysecret
      defaultMode: 0400
```

Then, the secret will be mounted on `/etc/foo` and all the files created by the
secret volume mount will have permission `0400`.

Note that the JSON spec doesn&#39;t support octal notation, so use the value 256 for
0400 permissions. If you use YAML instead of JSON for the Pod, you can use octal
notation to specify permissions in a more natural way.

Note if you `kubectl exec` into the Pod, you need to follow the symlink to find
the expected file mode. For example,

Check the secrets file mode on the pod.
```
kubectl exec mypod -it sh

cd /etc/foo
ls -l
```

The output is similar to this:
```
total 0
lrwxrwxrwx 1 root root 15 May 18 00:18 password -&gt; ..data/password
lrwxrwxrwx 1 root root 15 May 18 00:18 username -&gt; ..data/username
```

Follow the symlink to find the correct file mode.

```
cd /etc/foo/..data
ls -l
```

The output is similar to this:
```
total 8
-r-------- 1 root root 12 May 18 00:18 password
-r-------- 1 root root  5 May 18 00:18 username
```

You can also use mapping, as in the previous example, and specify different
permissions for different files like this:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: &#34;/etc/foo&#34;
  volumes:
  - name: foo
    secret:
      secretName: mysecret
      items:
      - key: username
        path: my-group/my-username
        mode: 0777
```

In this case, the file resulting in `/etc/foo/my-group/my-username` will have
permission value of `0777`. If you use JSON, owing to JSON limitations, you
must specify the mode in decimal notation, `511`.

Note that this permission value might be displayed in decimal notation if you
read it later.
--&gt;
&lt;h4 id=&#34;secret-files-permissions&#34;&gt;Secret 文件权限&lt;/h4&gt;
&lt;p&gt;用户可以为 Secret 的每个键投射的文件设置权限。 如果不设置任何权限，则默认使用 &lt;code&gt;0644&lt;/code&gt;。
也可以为整个 Secret 卷设置默认权限，如果需要也可以覆盖每个键的权限。&lt;/p&gt;
&lt;p&gt;例如，指定默认模式可以如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mypod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mypod&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/foo&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecret&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;defaultMode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0400&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上面的例子中， Secret 会被挂载到 &lt;code&gt;/etc/foo&lt;/code&gt; 所有在 Secret 中创建的所有的文件权限就是 &lt;code&gt;0400&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;要注意 JSON 配置不支持八进制写法，所以 &lt;code&gt;0400&lt;/code&gt; 权限要用 256. 如果使用 YAML 而不是 JSON 定义
Pod， 则可以直接使用常用的八进制写法来设置权限&lt;/p&gt;
&lt;p&gt;注意，如果通过 &lt;code&gt;kubectl exec&lt;/code&gt; 进入 Pod 内部， 需要通过软连接来找到文件的权限模式。例如，
检查 Pod 中的 Secret 文件的权限.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl exec mypod -it sh

cd /etc/foo
ls -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;total 0
lrwxrwxrwx 1 root root 15 May 18 00:18 password -&amp;gt; ..data/password
lrwxrwxrwx 1 root root 15 May 18 00:18 username -&amp;gt; ..data/username
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;权所软连接找到真正的文件权限模式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /etc/foo/..data
ls -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;total 8
-r-------- 1 root root 12 May 18 00:18 password
-r-------- 1 root root  5 May 18 00:18 username
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用于也可以在使用映射时为不同文件指定不同权限，例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mypod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mypod&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/foo&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecret&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;items&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;username&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-group/my-username&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;mode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上面的例子中，最终生成的 &lt;code&gt;/etc/foo/my-group/my-username&lt;/code&gt; 的权限是 &lt;code&gt;0777&lt;/code&gt;。 如果使用的
是 JSON， 就会受 JSON 的限制，就需要以十进制写法来设置权限模式为 &lt;code&gt;511&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;要注意如果在之后的读取中，这个权限值可以会以十进制来显示。&lt;/p&gt;
&lt;!--
#### Consuming Secret values from volumes

Inside the container that mounts a secret volume, the secret keys appear as
files and the secret values are base64 decoded and stored inside these files.
This is the result of commands executed inside the container from the example above:

```shell
ls /etc/foo/
```

The output is similar to:

```
username
password
```

```shell
cat /etc/foo/username
```

The output is similar to:

```
admin
```

```shell
cat /etc/foo/password
```

The output is similar to:

```
1f2d1e2e67df
```

The program in a container is responsible for reading the secrets from the
files.
--&gt;
&lt;h4 id=&#34;consuming-secret-values-from-volumes&#34;&gt;使用投射到卷中的 Secret 值&lt;/h4&gt;
&lt;p&gt;在挂载 Secret 卷的容器中，Secret 键会以文件名，Secret 的值在 base64 解码后存入文件中。
下面是在上面示例中的容器中执行的命令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ls /etc/foo/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;username
password
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat /etc/foo/username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;admin
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat /etc/foo/password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1f2d1e2e67df
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;容器中的的程序要负责读取 Secret 投射出来的文件。&lt;/p&gt;
&lt;!--
#### Mounted Secrets are updated automatically

When a secret currently consumed in a volume is updated, projected keys are eventually updated as well.
The kubelet checks whether the mounted secret is fresh on every periodic sync.
However, the kubelet uses its local cache for getting the current value of the Secret.
The type of the cache is configurable using the `ConfigMapAndSecretChangeDetectionStrategy` field in
the [KubeletConfiguration struct](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/kubelet/config/v1beta1/types.go).
A Secret can be either propagated by watch (default), ttl-based, or simply redirecting
all requests directly to the API server.
As a result, the total delay from the moment when the Secret is updated to the moment
when new keys are projected to the Pod can be as long as the kubelet sync period + cache
propagation delay, where the cache propagation delay depends on the chosen cache type
(it equals to watch propagation delay, ttl of cache, or zero correspondingly).

&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; A container using a Secret as a
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/concepts/storage/volumes#using-subpath&#34;&gt;subPath&lt;/a&gt; volume mount will not receive
Secret updates.&lt;/div&gt;
&lt;/blockquote&gt;

 --&gt;
&lt;h4 id=&#34;mounted-secrets-are-updated-automatically&#34;&gt;挂载 Secret 的自动更新&lt;/h4&gt;
&lt;p&gt;当一个正在被以卷方式使用的 Secret 更新时，与其相映射的键最终也会更新。kubelet 会在每个
同步周期检查挂载的 Secret 是否更新。kubelet 会使用本地缓存来获取 Secret 的当前值。
缓存的类型可以通过
&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/kubelet/config/v1beta1/types.go&#34;&gt;KubeletConfiguration struct&lt;/a&gt;.
中的 &lt;code&gt;ConfigMapAndSecretChangeDetectionStrategy&lt;/code&gt; 字段来配置。 Secret 的传播方式有
监视(默认)，基于 ttl, 或简单地将所有请求直接重定向给 API server. 最终， 从 Secret 更新
到新的键被投射到 Pod 中的总延时就是 kubelet 同时间隔时长 + 缓存传播延时， 而其中缓存传播延时
又基于缓存的类型(相应地它可能等于 监视传播延时，缓存的 TTL, 或零)。&lt;/p&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; 容器使用
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/concepts/storage/volumes#using-subpath&#34;&gt;子目录&lt;/a&gt;
方式挂载 Secret 的卷不会接收到 Secret 的更新。&lt;/div&gt;
&lt;/blockquote&gt;

&lt;!--
### Using Secrets as environment variables

To use a secret in an &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/containers/container-environment/&#39; target=&#39;_blank&#39;&gt;environment variable&lt;span class=&#39;tooltip-text&#39;&gt;容器环境变量是 name=value 对，用来给 Pod 中运行的容器提供有用的信息&lt;/span&gt;
&lt;/a&gt;
in a Pod:

1. Create a secret or use an existing one.  Multiple Pods can reference the same secret.
1. Modify your Pod definition in each container that you wish to consume the value of a secret key to add an environment variable for each secret key you wish to consume. The environment variable that consumes the secret key should populate the secret&#39;s name and key in `env[].valueFrom.secretKeyRef`.
1. Modify your image and/or command line so that the program looks for values in the specified environment variables.

This is an example of a Pod that uses secrets from environment variables:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
  - name: mycontainer
    image: redis
    env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: username
      - name: SECRET_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: password
  restartPolicy: Never
```
 --&gt;
&lt;h3 id=&#34;using-secrets-as-environment-variables&#34;&gt;将 Secret 用作环境变量&lt;/h3&gt;
&lt;p&gt;要将 Secret 用作 Pod 中的
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/containers/container-environment/&#39; target=&#39;_blank&#39;&gt;容器环境变量&lt;span class=&#39;tooltip-text&#39;&gt;容器环境变量是 name=value 对，用来给 Pod 中运行的容器提供有用的信息&lt;/span&gt;
&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建或使用一个现有的 Secret. 多个 Pod 可以引用同一个 Secret.&lt;/li&gt;
&lt;li&gt;修改 Pod 中每个想要将 Secret 的键作为环境变量的容器的定义配置， 每个使用 Secret 键的环境
变量都需要添加 &lt;code&gt;env[].valueFrom.secretKeyRef&lt;/code&gt; 将指向使用 Secret 键&lt;/li&gt;
&lt;li&gt;修改镜像或命令以便让程序查看指定的环境变量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个使用 Secret 作为环境变量的 Pod 示例配置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-env-pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mycontainer&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;SECRET_USERNAME&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecret&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;username&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;SECRET_PASSWORD&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecret&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;password&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;restartPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--
#### Consuming Secret Values from environment variables

Inside a container that consumes a secret in an environment variables, the secret keys appear as
normal environment variables containing the base64 decoded values of the secret data.
This is the result of commands executed inside the container from the example above:

```shell
echo $SECRET_USERNAME
```

The output is similar to:

```
admin
```

```shell
echo $SECRET_PASSWORD
```

The output is similar to:

```
1f2d1e2e67df
```
 --&gt;
&lt;h4 id=&#34;consuming-secret-values-from-environment-variables&#34;&gt;使用 Secret 投射出来的环境变量&lt;/h4&gt;
&lt;p&gt;Inside a container that consumes a secret in an environment variables, the secret keys appear as
normal environment variables containing the base64 decoded values of the secret data.
This is the result of commands executed inside the container from the example above:
在使用 Secret 投射出来的环境变量的容器中，最终环境变量引用的 Secret 键的环境变量的值是 Secret
数据 base64 解码的值。 下面是在容器中执行的命令示例；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;echo $SECRET_USERNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;admin
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;echo $SECRET_PASSWORD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1f2d1e2e67df
&lt;/code&gt;&lt;/pre&gt;&lt;!--
#### Environment variables are not updated after a secret update

If a container already consumes a Secret in an environment variable, a Secret update will not be seen by the container unless it is restarted.
There are third party solutions for triggering restarts when secrets change.
 --&gt;
&lt;h4 id=&#34;environment-variables-are-not-updated-after-a-secret-update&#34;&gt;环境变量不会在 Secret 更新后更新&lt;/h4&gt;
&lt;p&gt;如果一个容器已经在以环境变量的方式使用一个 Secret, 容器在重启之前是看不到 Secret 的更新的。
有第三方解决方案可以在 Secret 发生变更时来触发重启&lt;/p&gt;
&lt;!--
## Immutable Secrets {#secret-immutable}






&lt;div style=&#34;margin-top: 10px; margin-bottom: 10px;&#34;&gt;
&lt;b&gt;功能特性状态:&lt;/b&gt; &lt;code&gt;Kubernetes v1.19 [beta]&lt;/code&gt;
&lt;/div&gt;



The Kubernetes beta feature _Immutable Secrets and ConfigMaps_ provides an option to set
individual Secrets and ConfigMaps as immutable. For clusters that extensively use Secrets
(at least tens of thousands of unique Secret to Pod mounts), preventing changes to their
data has the following advantages:

- protects you from accidental (or unwanted) updates that could cause applications outages
- improves performance of your cluster by significantly reducing load on kube-apiserver, by
closing watches for secrets marked as immutable.

This feature is controlled by the `ImmutableEphemeralVolumes` [feature
gate](/docs/reference/command-line-tools-reference/feature-gates/),
which is enabled by default since v1.19. You can create an immutable
Secret by setting the `immutable` field to `true`. For example,
```yaml
apiVersion: v1
kind: Secret
metadata:
  ...
data:
  ...
immutable: true
```

&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; Once a Secret or ConfigMap is marked as immutable, it is &lt;em&gt;not&lt;/em&gt; possible to revert this change
nor to mutate the contents of the &lt;code&gt;data&lt;/code&gt; field. You can only delete and recreate the Secret.
Existing Pods maintain a mount point to the deleted Secret - it is recommended to recreate
these pods.&lt;/div&gt;
&lt;/blockquote&gt;

 --&gt;
&lt;h2 id=&#34;secret-immutable&#34;&gt;不可变 Secret&lt;/h2&gt;





&lt;div style=&#34;margin-top: 10px; margin-bottom: 10px;&#34;&gt;
&lt;b&gt;功能特性状态:&lt;/b&gt; &lt;code&gt;Kubernetes v1.19 [beta]&lt;/code&gt;
&lt;/div&gt;


&lt;p&gt;这个 k8s 的 bata 特性 &lt;em&gt;不可变 Secret 和 ConfigMap&lt;/em&gt; 提供了一个可选项，可以让一个 Secret
和 ConfigMap 变为不可变。 对于那些广泛使用 Secret (一个 Secret 至少被 10k Pod 挂载)，
防止修改它们中的数据有以下好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防止误操作(或不想要)的更新可能引发的应用事故&lt;/li&gt;
&lt;li&gt;当 Secret 标记为不可变时会关闭监视，这样能极大地减少 kube-apiserver 的负载，从而改善
集群性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个特性通过设置 &lt;code&gt;ImmutableEphemeralVolumes&lt;/code&gt;
&lt;a href=&#34;https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/&#34;&gt;功能阀&lt;/a&gt;
控制。 从 k8s v1.19 开始该特性默认开启的。
用户可以在 Secret 中通过设置 &lt;code&gt;immutable&lt;/code&gt; 字段为 &lt;code&gt;true&lt;/code&gt; 让其成功不可变 Secret&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;immutable&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; 当一个 Secret 或 ConfigMap 被标记为不可变后，它就 &lt;em&gt;不&lt;/em&gt; 可能再被变会普通， 也不可能再修改其
&lt;code&gt;data&lt;/code&gt; 字段的内容。 只能删除或重建 Secret . 现有的 Pod 会维持对已经删除的 Secret 挂载指向，
推荐对这些 Pod 也进行重建。&lt;/div&gt;
&lt;/blockquote&gt;

&lt;!--
### Using imagePullSecrets

The `imagePullSecrets` field is a list of references to secrets in the same namespace.
You can use an `imagePullSecrets` to pass a secret that contains a Docker (or other) image registry
password to the kubelet. The kubelet uses this information to pull a private image on behalf of your Pod.
See the [PodSpec API](/docs/reference/generated/kubernetes-api/v1.19/#podspec-v1-core) for more information about the `imagePullSecrets` field.
 --&gt;
&lt;h3 id=&#34;using-imagepullsecrets&#34;&gt;使用 &lt;code&gt;imagePullSecrets&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;imagePullSecrets&lt;/code&gt; 字段值是一个引用同一个命名空间中的 Secret 的列表。用户可以使用
&lt;code&gt;imagePullSecrets&lt;/code&gt; 向 Docker (或其它) 镜像仓库传递一个包含密码的 Secret 给 kubelet.
kubelet 使用这些信息来为 Pod 从私有镜像仓库拉取镜像。更多关于 &lt;code&gt;imagePullSecrets&lt;/code&gt; 字段的信息见
&lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#podspec-v1-core&#34;&gt;PodSpec API&lt;/a&gt;&lt;/p&gt;
&lt;!--
#### Manually specifying an imagePullSecret

You can learn how to specify `ImagePullSecrets` from the [container images documentation](/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod).
 --&gt;
&lt;h4 id=&#34;manually-specifying-an-imagepullsecret&#34;&gt;手动指定一个 imagePullSecret&lt;/h4&gt;
&lt;p&gt;用户可以通过
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod&#34;&gt;容器镜像文档&lt;/a&gt;
学习怎么指定 &lt;code&gt;ImagePullSecrets&lt;/code&gt;&lt;/p&gt;
&lt;!--
### Arranging for imagePullSecrets to be automatically attached

You can manually create `imagePullSecrets`, and reference it from
a ServiceAccount. Any Pods created with that ServiceAccount
or created with that ServiceAccount by default, will get their `imagePullSecrets`
field set to that of the service account.
See [Add ImagePullSecrets to a service account](/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account)
 for a detailed explanation of that process.
 --&gt;
&lt;h3 id=&#34;arranging-for-imagepullsecrets-to-be-automatically-attached&#34;&gt;设置 imagePullSecrets 自动加载&lt;/h3&gt;
&lt;p&gt;用户可以手动创建 &lt;code&gt;imagePullSecrets&lt;/code&gt;，并在 ServiceAccount 中引用它。 任意以这个 ServiceAccount
创建或默认以这个 ServiceAccount 创建的 Pod 都会获得它们的 &lt;code&gt;imagePullSecrets&lt;/code&gt; 字段为这个
ServiceAccount。 更多对这个过程的详细解释见
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account&#34;&gt;将 ImagePullSecrets 添加到 ServiceAccount&lt;/a&gt;&lt;/p&gt;
&lt;!--
### Automatic mounting of manually created Secrets

Manually created secrets (for example, one containing a token for accessing a GitHub account)
can be automatically attached to pods based on their service account.
See [Injecting Information into Pods Using a PodPreset](/docs/tasks/inject-data-application/podpreset/) for a detailed explanation of that process.
 --&gt;
&lt;h3 id=&#34;automatic-mounting-of-manually-created-secrets&#34;&gt;自动挂载手动创建的 Secret&lt;/h3&gt;
&lt;p&gt;Manually created secrets (for example, one containing a token for accessing a GitHub account)
can be automatically attached to pods based on their service account.
See &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/tasks/inject-data-application/podpreset/&#34;&gt;Injecting Information into Pods Using a PodPreset&lt;/a&gt; for a detailed explanation of that process.
手动创建的 Secret (例如，一个包含 GitHub 账号)可以通过 ServiceAccount 自动挂载到 Pod。
更多关于这个过程的解释见
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/inject-data-application/podpreset/&#34;&gt;使用 PodPreset 向 Pod 中注入信息&lt;/a&gt;&lt;/p&gt;
&lt;!--
## Details

### Restrictions

Secret volume sources are validated to ensure that the specified object
reference actually points to an object of type Secret. Therefore, a secret
needs to be created before any Pods that depend on it.

Secret resources reside in a &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/overview/working-with-objects/namespaces&#39; target=&#39;_blank&#39;&gt;namespace&lt;span class=&#39;tooltip-text&#39;&gt;一个用于在同一个物理集群中支持多个虚拟集群的抽象概念&lt;/span&gt;
&lt;/a&gt;.
Secrets can only be referenced by Pods in that same namespace.

Individual secrets are limited to 1MiB in size. This is to discourage creation
of very large secrets which would exhaust the API server and kubelet memory.
However, creation of many smaller secrets could also exhaust memory. More
comprehensive limits on memory usage due to secrets is a planned feature.

The kubelet only supports the use of secrets for Pods where the secrets
are obtained from the API server.
This includes any Pods created using `kubectl`, or indirectly via a replication
controller. It does not include Pods created as a result of the kubelet
`--manifest-url` flag, its `--config` flag, or its REST API (these are
not common ways to create Pods.)

Secrets must be created before they are consumed in Pods as environment
variables unless they are marked as optional. References to secrets that do
not exist will prevent the Pod from starting.

References (`secretKeyRef` field) to keys that do not exist in a named Secret
will prevent the Pod from starting.

Secrets used to populate environment variables by the `envFrom` field that have keys
that are considered invalid environment variable names will have those keys
skipped. The Pod will be allowed to start. There will be an event whose
reason is `InvalidVariableNames` and the message will contain the list of
invalid keys that were skipped. The example shows a pod which refers to the
default/mysecret that contains 2 invalid keys: `1badkey` and `2alsobad`.

```shell
kubectl get events
```

The output is similar to:

```
LASTSEEN   FIRSTSEEN   COUNT     NAME            KIND      SUBOBJECT                         TYPE      REASON
0s         0s          1         dapi-test-pod   Pod                                         Warning   InvalidEnvironmentVariableNames   kubelet, 127.0.0.1      Keys [1badkey, 2alsobad] from the EnvFrom secret default/mysecret were skipped since they are considered invalid environment variable names.
```
 --&gt;
&lt;h2 id=&#34;details&#34;&gt;一些细节&lt;/h2&gt;
&lt;h3 id=&#34;限制&#34;&gt;限制&lt;/h3&gt;
&lt;p&gt;Secret 卷的源会被验证这个对象引用的确实是一个 Secret 类型的对象。 因此，Secret 需要在任意依赖
它的 Pod 之前创建。&lt;/p&gt;
&lt;p&gt;Secret 资源受限于
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/overview/working-with-objects/namespaces&#39; target=&#39;_blank&#39;&gt;命名空间(namespace)&lt;span class=&#39;tooltip-text&#39;&gt;一个用于在同一个物理集群中支持多个虚拟集群的抽象概念&lt;/span&gt;
&lt;/a&gt;.
Secret 只能被同一个命名空间中的 Pod 引用。&lt;/p&gt;
&lt;p&gt;单个 Secret 的空间仅限于 1MiB. 非常不建议创建体积很大的 Secret 因为它可能会导致 API 服务
和 kubelet 内存耗尽。但是创建许多小点的 Secret 也可能耗尽内存。 更多全面限制 Secret 使用
的内存是一个计划的特性。&lt;/p&gt;
&lt;p&gt;kubelet 只支持为 Pod 使用那些通过 API 服务获取的 Secret. 这包含任意通过 &lt;code&gt;kubectl&lt;/code&gt; 的 Pod，
或通过副本控制器间接创建的。 但不支持通过 kubelet 的 &lt;code&gt;--manifest-url&lt;/code&gt;， &lt;code&gt;--config&lt;/code&gt;
创建的 Pod， 或通过 kubelet REST API 创建的 Pod(这些都不创建 Pod 的常用方式)&lt;/p&gt;
&lt;p&gt;Secret 必须在使用它作为环境变量的 Pod 之前先创建好，不然环境变量就只能标记为可选。 如果 Pod
引用的 Secret 不存储就会阻止 Pod 启动。&lt;/p&gt;
&lt;p&gt;引用(通过 &lt;code&gt;secretKeyRef&lt;/code&gt; 字段)的键在指定 Secret 中不存在也会阻止 Pod 启动。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;envFrom&lt;/code&gt; 字段使用 Secret 作为环境变量时，如果其中的键被认为不是一个有效的环境变量名称
则这些键就会被跳过。 Pod 会被允许启动。 这会产生一个事件，其中的原因是 &lt;code&gt;InvalidVariableNames&lt;/code&gt;
信息中会包含被跳过的无效的键的列表。下面的示例中，显示一个引用 default/mysecret 的 Pod。 这个
Secret 中包含两个无效的键: &lt;code&gt;1badkey&lt;/code&gt; 和 &lt;code&gt;2alsobad&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl get events
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果类别如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LASTSEEN   FIRSTSEEN   COUNT     NAME            KIND      SUBOBJECT                         TYPE      REASON
0s         0s          1         dapi-test-pod   Pod                                         Warning   InvalidEnvironmentVariableNames   kubelet, 127.0.0.1      Keys [1badkey, 2alsobad] from the EnvFrom secret default/mysecret were skipped since they are considered invalid environment variable names.
&lt;/code&gt;&lt;/pre&gt;&lt;!--
### Secret and Pod lifetime interaction

When a Pod is created by calling the Kubernetes API, there is no check if a referenced
secret exists. Once a Pod is scheduled, the kubelet will try to fetch the
secret value. If the secret cannot be fetched because it does not exist or
because of a temporary lack of connection to the API server, the kubelet will
periodically retry. It will report an event about the Pod explaining the
reason it is not started yet. Once the secret is fetched, the kubelet will
create and mount a volume containing it. None of the Pod&#39;s containers will
start until all the Pod&#39;s volumes are mounted.
--&gt;
&lt;h3 id=&#34;secret-and-pod-lifetime-interaction&#34;&gt;Secret 和 Pod 生命周期交互&lt;/h3&gt;
&lt;p&gt;当通过调用 k8s API 创建一个 Pod 时，并不会检查它引用的 Secret 是不是存储。 当 Pod 被调度时
kubelet 会尝试获取 Secret 的值。 如果因为 Secret 不存在或暂时无法连接到 API 服务而导致
无法获取 Secret, kubelet 会定期重试。 它会报告一个解释为啥 Pod 还没有启动的原因的事件。
当 Secret 获取后， kubelet 会创建并挂载一个卷来存储它。 在 Pod 所有的卷挂载之前没有容器会
启动。&lt;/p&gt;
&lt;!--
## Use cases

### Use-Case: As container environment variables

Create a secret
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  USER_NAME: YWRtaW4=
  PASSWORD: MWYyZDFlMmU2N2Rm
```

Create the Secret:
```shell
kubectl apply -f mysecret.yaml
```

Use `envFrom` to define all of the Secret&#39;s data as container environment variables. The key from the Secret becomes the environment variable name in the Pod.

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ &#34;/bin/sh&#34;, &#34;-c&#34;, &#34;env&#34; ]
      envFrom:
      - secretRef:
          name: mysecret
  restartPolicy: Never
```
 --&gt;
&lt;h2 id=&#34;use-cases&#34;&gt;使用场景&lt;/h2&gt;
&lt;h3 id=&#34;使用场景-作为容器环境变量&#34;&gt;使用场景: 作为容器环境变量&lt;/h3&gt;
&lt;p&gt;Secret 定义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Opaque&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;USER_NAME&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;YWRtaW4=&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;PASSWORD&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MWYyZDFlMmU2N2Rm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建 Secret:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl apply -f mysecret.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;envFrom&lt;/code&gt; 将 Secret 中的所有数据作为容器环境变量。 键会作为 Pod 中环境变量的名称。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-test-pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-container&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;k8s.gcr.io/busybox&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;: [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt; ]
      &lt;span style=&#34;color:#f92672&#34;&gt;envFrom&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;secretRef&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecret&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;restartPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用场景-pod-中使用-ssh-密钥&#34;&gt;使用场景: Pod 中使用 SSH 密钥&lt;/h3&gt;
&lt;p&gt;创建一个包含 SSH 密钥的 Secret:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl create secret generic ssh-key-secret --from-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ssh-privatekey&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/path/to/.ssh/id_rsa --from-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ssh-publickey&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/path/to/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令输出类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;secret &amp;quot;ssh-key-secret&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用户也可以使用一个包含 &lt;code&gt;secretGenerator&lt;/code&gt; 的 &lt;code&gt;kustomization.yaml&lt;/code&gt; 来装 SSH 密钥。&lt;/p&gt;
&lt;blockquote class=&#34;caution&#34;&gt;
  &lt;div&gt;&lt;strong&gt;注意：&lt;/strong&gt; 在上传 SSH 密钥之前要仔细考虑: 集群中的其他用户也可能访问这个 Secret. 使用一个 ServiceAccount
来让集群中的部分用户可以访问这个 Secret，如果有用户发生泄漏可以废除这个 ServiceAccount.&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在就可以创建一个 Pod 并在其中通过卷使用 Secret 中的 SSH 密钥:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-test-pod&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-test&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-volume&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ssh-key-secret&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ssh-test-container&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mySshImage&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-volume&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/secret-volume&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 容器运行时，SSH 密钥就是在:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/secret-volume/ssh-publickey
/etc/secret-volume/ssh-privatekey
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时容器就可以使用 Secret 中的数据来建立 SSH 连接。&lt;/p&gt;
&lt;!--
### Use-Case: Pods with prod / test credentials

This example illustrates a Pod which consumes a secret containing production
credentials and another Pod which consumes a secret with test environment
credentials.

You can create a `kustomization.yaml` with a `secretGenerator` field or run
`kubectl create secret`.

```shell
kubectl create secret generic prod-db-secret --from-literal=username=produser --from-literal=password=Y4nys7f11
```

The output is similar to:

```
secret &#34;prod-db-secret&#34; created
```

You can also create a secret for test environment credentials.

```shell
kubectl create secret generic test-db-secret --from-literal=username=testuser --from-literal=password=iluvtests
```

The output is similar to:

```
secret &#34;test-db-secret&#34; created
```

&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; &lt;p&gt;Special characters such as &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, and &lt;code&gt;!&lt;/code&gt; will be interpreted by your &lt;a href=&#34;https://en.wikipedia.org/wiki/Shell_(computing)&#34;&gt;shell&lt;/a&gt; and require escaping.
In most shells, the easiest way to escape the password is to surround it with single quotes (&lt;code&gt;&#39;&lt;/code&gt;).
For example, if your actual password is &lt;code&gt;S!B\*d$zDsb=&lt;/code&gt;, you should execute the command this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl create secret generic dev-db-secret --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;devuser --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S!B\*d$zDsb=&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You do not need to escape special characters in passwords from files (&lt;code&gt;--from-file&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;


Now make the Pods:

```shell
cat &lt;&lt;EOF &gt; pod.yaml
apiVersion: v1
kind: List
items:
- kind: Pod
  apiVersion: v1
  metadata:
    name: prod-db-client-pod
    labels:
      name: prod-db-client
  spec:
    volumes:
    - name: secret-volume
      secret:
        secretName: prod-db-secret
    containers:
    - name: db-client-container
      image: myClientImage
      volumeMounts:
      - name: secret-volume
        readOnly: true
        mountPath: &#34;/etc/secret-volume&#34;
- kind: Pod
  apiVersion: v1
  metadata:
    name: test-db-client-pod
    labels:
      name: test-db-client
  spec:
    volumes:
    - name: secret-volume
      secret:
        secretName: test-db-secret
    containers:
    - name: db-client-container
      image: myClientImage
      volumeMounts:
      - name: secret-volume
        readOnly: true
        mountPath: &#34;/etc/secret-volume&#34;
EOF
```

Add the pods to the same kustomization.yaml:

```shell
cat &lt;&lt;EOF &gt;&gt; kustomization.yaml
resources:
- pod.yaml
EOF
```

Apply all those objects on the API server by running:

```shell
kubectl apply -k .
```

Both containers will have the following files present on their filesystems with the values for each container&#39;s environment:

```
/etc/secret-volume/username
/etc/secret-volume/password
```

Note how the specs for the two Pods differ only in one field; this facilitates
creating Pods with different capabilities from a common Pod template.

You could further simplify the base Pod specification by using two service accounts:

1. `prod-user` with the `prod-db-secret`
1. `test-user` with the `test-db-secret`

The Pod specification is shortened to:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: prod-db-client-pod
  labels:
    name: prod-db-client
spec:
  serviceAccount: prod-db-client
  containers:
  - name: db-client-container
    image: myClientImage
```
 --&gt;
&lt;h3 id=&#34;应用场景-使用生产测试凭据的-pod&#34;&gt;应用场景: 使用生产/测试凭据的 Pod&lt;/h3&gt;
&lt;p&gt;本次示例演示的是一个使用包含生产环境凭据的 Secret 的 Pod 和另一个使用包含测试环境凭据的 Pod&lt;/p&gt;
&lt;p&gt;用户可以通过对一个包含 &lt;code&gt;secretGenerator&lt;/code&gt; 字段的 &lt;code&gt;kustomization.yaml&lt;/code&gt; 执行
&lt;code&gt;kubectl create secret&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl create secret generic prod-db-secret --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;produser --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Y4nys7f11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;secret &amp;quot;prod-db-secret&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样的方式为测试环境创建 Secret&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl create secret generic test-db-secret --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;testuser --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iluvtests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果类似如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;secret &amp;quot;test-db-secret&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; &lt;p&gt;特殊字符，如 &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, 和 &lt;code&gt;!&lt;/code&gt;，会被
&lt;a href=&#34;https://en.wikipedia.org/wiki/Shell_(computing)&#34;&gt;shell&lt;/a&gt;
解释，所以需要转义.  在大多数 SHELL 中， 对密码进行转义最简单的方式就是用单引号(&lt;code&gt;&#39;&lt;/code&gt;)包起来。
例如，如果实际的密码是 &lt;code&gt;S!B\*d$zDsb=&lt;/code&gt;, 可以执行下面的命令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl create secret generic dev-db-secret --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;devuser --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S!B\*d$zDsb=&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不需要对文件中的特殊字符进行转义 (&lt;code&gt;--from-file&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加 Pod 配置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF &amp;gt; pod.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: List
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;items:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- kind: Pod
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    name: prod-db-client-pod
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      name: prod-db-client
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    volumes:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    - name: secret-volume
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      secret:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        secretName: prod-db-secret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    - name: db-client-container
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      image: myClientImage
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      volumeMounts:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - name: secret-volume
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        readOnly: true
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        mountPath: &amp;#34;/etc/secret-volume&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- kind: Pod
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    name: test-db-client-pod
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      name: test-db-client
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    volumes:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    - name: secret-volume
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      secret:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        secretName: test-db-secret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    - name: db-client-container
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      image: myClientImage
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      volumeMounts:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - name: secret-volume
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        readOnly: true
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        mountPath: &amp;#34;/etc/secret-volume&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将这些 Pod 添加到同一个 kustomization.yaml:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; kustomization.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;resources:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- pod.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过下面的命令将所有的对象提交到 API 服务:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl apply -k .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两个容器中都会在它们的文件存在以下文件，其中包含的是各自环境对应的值:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/secret-volume/username
/etc/secret-volume/password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;两个 Pod 定义中的区别只有一个字段，这使得通过同一个 Pod 模板创建不同功能的 Pod 变得更容易。&lt;/p&gt;
&lt;p&gt;还可以通过以下两个 ServiceAccount 进一步简化基础 Pod 定义:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包含 &lt;code&gt;prod-db-secret&lt;/code&gt; 的 &lt;code&gt;prod-user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;包含 &lt;code&gt;test-db-secret&lt;/code&gt; 的 &lt;code&gt;test-user&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pod 定义就简化为:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prod-db-client-pod&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prod-db-client&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;serviceAccount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prod-db-client&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;db-client-container&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;myClientImage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--
### Use-case: dotfiles in a secret volume

You can make your data &#34;hidden&#34; by defining a key that begins with a dot.
This key represents a dotfile or &#34;hidden&#34; file. For example, when the following secret
is mounted into a volume, `secret-volume`:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: dotfile-secret
data:
  .secret-file: dmFsdWUtMg0KDQo=
---
apiVersion: v1
kind: Pod
metadata:
  name: secret-dotfiles-pod
spec:
  volumes:
  - name: secret-volume
    secret:
      secretName: dotfile-secret
  containers:
  - name: dotfile-test-container
    image: k8s.gcr.io/busybox
    command:
    - ls
    - &#34;-l&#34;
    - &#34;/etc/secret-volume&#34;
    volumeMounts:
    - name: secret-volume
      readOnly: true
      mountPath: &#34;/etc/secret-volume&#34;
```

The volume will contain a single file, called `.secret-file`, and
the `dotfile-test-container` will have this file present at the path
`/etc/secret-volume/.secret-file`.

&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; Files beginning with dot characters are hidden from the output of  &lt;code&gt;ls -l&lt;/code&gt;;
you must use &lt;code&gt;ls -la&lt;/code&gt; to see them when listing directory contents.&lt;/div&gt;
&lt;/blockquote&gt;

 --&gt;
&lt;h3 id=&#34;use-case-dotfiles-in-a-secret-volume&#34;&gt;应用场景: Secret 卷中的点文件(隐藏文件)&lt;/h3&gt;
&lt;p&gt;用户可以在 Secret 的 data 下面的键设置为以点开头的格式，这样投射出的文件名就是以点开头，也就是隐藏文件
例如， 下面的 Secret 在挂载到 &lt;code&gt;secret-volume&lt;/code&gt; 卷:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dotfile-secret&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;.secret-file&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dmFsdWUtMg0KDQo=&lt;/span&gt;
---
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-dotfiles-pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-volume&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dotfile-secret&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dotfile-test-container&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;k8s.gcr.io/busybox&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;ls&lt;/span&gt;
    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-l&amp;#34;&lt;/span&gt;
    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/secret-volume&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret-volume&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/secret-volume&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终 卷中就会包含一个文件，文件名为 &lt;code&gt;.secret-file&lt;/code&gt;， 而在 &lt;code&gt;dotfile-test-container&lt;/code&gt; 中
这个文件的路径就是 &lt;code&gt;/etc/secret-volume/.secret-file&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; &lt;code&gt;ls -l&lt;/code&gt; 命令的输出结果中是没有以点开头的文件的；要查看这些文件需要使用命令 &lt;code&gt;ls -la&lt;/code&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;!--
### Use-case: Secret visible to one container in a Pod

Consider a program that needs to handle HTTP requests, do some complex business
logic, and then sign some messages with an HMAC. Because it has complex
application logic, there might be an unnoticed remote file reading exploit in
the server, which could expose the private key to an attacker.

This could be divided into two processes in two containers: a frontend container
which handles user interaction and business logic, but which cannot see the
private key; and a signer container that can see the private key, and responds
to simple signing requests from the frontend (for example, over localhost networking).

With this partitioned approach, an attacker now has to trick the application
server into doing something rather arbitrary, which may be harder than getting
it to read a file.
 --&gt;
&lt;!-- TODO: explain how to do this while still using automation. --&gt;
&lt;h3 id=&#34;use-case-secret-visible-to-one-container-in-a-pod&#34;&gt;应用场景: 让 Secret 只在 Pod 中的一个容器中可见&lt;/h3&gt;
&lt;p&gt;假设有一个程序，需要处理 HTTP 请求，完成一些复杂的业务逻辑，最后使用 HMAC 对一些消息做签名。
因为其中有些复杂的业务逻辑，其中可以包含一个没有发现的远程文件读取， 这可能导致将私钥暴露给攻击者。&lt;/p&gt;
&lt;p&gt;这时就可以把这个程序拆分成两个进程运行在两个容器中: 一个前端容器，用来处理用户交互和业务逻辑，
但是它不能看到私钥； 另一个签发容器，其中可以看到私钥，只提供为前端容器一个简单签发请求功能
(例如， 通过本地(localhost)网络).&lt;/p&gt;
&lt;p&gt;通过这种拆分方式， 攻击都现在只能在前端容器中，而不是整个应用，这样可能增加读取文件的难度。&lt;/p&gt;
&lt;!-- TODO: explain how to do this while still using automation. --&gt;
&lt;!--
## Best practices

### Clients that use the Secret API

When deploying applications that interact with the Secret API, you should
limit access using [authorization policies](
/docs/reference/access-authn-authz/authorization/) such as [RBAC](
/docs/reference/access-authn-authz/rbac/).

Secrets often hold values that span a spectrum of importance, many of which can
cause escalations within Kubernetes (e.g. service account tokens) and to
external systems. Even if an individual app can reason about the power of the
secrets it expects to interact with, other apps within the same namespace can
render those assumptions invalid.

For these reasons `watch` and `list` requests for secrets within a namespace are
extremely powerful capabilities and should be avoided, since listing secrets allows
the clients to inspect the values of all secrets that are in that namespace. The ability to
`watch` and `list` all secrets in a cluster should be reserved for only the most
privileged, system-level components.

Applications that need to access the Secret API should perform `get` requests on
the secrets they need. This lets administrators restrict access to all secrets
while [white-listing access to individual instances](
/docs/reference/access-authn-authz/rbac/#referring-to-resources) that
the app needs.

For improved performance over a looping `get`, clients can design resources that
reference a secret then `watch` the resource, re-requesting the secret when the
reference changes. Additionally, a [&#34;bulk watch&#34; API](
https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/bulk_watch.md)
to let clients `watch` individual resources has also been proposed, and will likely
be available in future releases of Kubernetes.
 --&gt;
&lt;h2 id=&#34;best-practices&#34;&gt;最佳实践&lt;/h2&gt;
&lt;h3 id=&#34;clients-that-use-the-secret-api&#34;&gt;使用 Secret API 的那些客户端&lt;/h3&gt;
&lt;p&gt;在部署与 Secret API 交互的应用时，用户需要使用
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/reference/access-authn-authz/authorization/&#34;&gt;授权策略&lt;/a&gt;
如
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/reference/access-authn-authz/rbac/&#34;&gt;RBAC&lt;/a&gt;
来限制访问&lt;/p&gt;
&lt;p&gt;Secret 经常包含的值都是很重要的，它们从集群内(如 服务账号令牌) 和外部系统。 即便有天大的理由
让一个应该可以访问这些 Secret, 同一个命名空间的其它应用也会推翻这些理由。
&lt;blockquote&gt;
  &lt;div&gt;&lt;strong&gt;TODO: &lt;/strong&gt;说得不太清楚，需要实践理解后再考虑怎么修改&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;因为这些原因在一个命名空间中对 Secret 的 &lt;code&gt;watch&lt;/code&gt; 和 &lt;code&gt;list&lt;/code&gt; 的请求就是相当强大的能力，并应该被避免，
因为列举 Secret 可以让客户端可以查看命名空间中的所有 Secret 的值。 对所有 Secret 使用
&lt;code&gt;watch&lt;/code&gt; 和 &lt;code&gt;list&lt;/code&gt; 的能力在集群中应该只提供给最高权限，系统级别的组件。&lt;/p&gt;
&lt;p&gt;需要访问 Secret API 的应用对其需要的 Secret 执行 &lt;code&gt;get&lt;/code&gt; 请求。 这让管理员通过
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/reference/access-authn-authz/rbac/#referring-to-resources&#34;&gt;访问独立实例的白名单&lt;/a&gt;
限制所有的 Secret 只被需要的应用访问。&lt;/p&gt;
&lt;p&gt;为了改善使用 &lt;code&gt;get&lt;/code&gt; 轮询的性能， 客户端可以设计资源，这些资源可以引用一个 Secret 然后 &lt;code&gt;watch&lt;/code&gt;
这个资源， 在引用变量时，重新请求 Secret. 另外，
&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/bulk_watch.md&#34;&gt;&amp;ldquo;bulk watch&amp;rdquo; API&lt;/a&gt;
让客户端 &lt;code&gt;watch&lt;/code&gt; 独立资源的提议已经有了， 可以在未来版本中的 k8s 中就有了。&lt;/p&gt;
&lt;!--
## Security properties

### Protections

Because secrets can be created independently of the Pods that use
them, there is less risk of the secret being exposed during the workflow of
creating, viewing, and editing Pods. The system can also take additional
precautions with Secrets, such as avoiding writing them to disk where
possible.

A secret is only sent to a node if a Pod on that node requires it.
The kubelet stores the secret into a `tmpfs` so that the secret is not written
to disk storage. Once the Pod that depends on the secret is deleted, the kubelet
will delete its local copy of the secret data as well.

There may be secrets for several Pods on the same node. However, only the
secrets that a Pod requests are potentially visible within its containers.
Therefore, one Pod does not have access to the secrets of another Pod.

There may be several containers in a Pod. However, each container in a Pod has
to request the secret volume in its `volumeMounts` for it to be visible within
the container. This can be used to construct useful [security partitions at the
Pod level](#use-case-secret-visible-to-one-container-in-a-pod).

On most Kubernetes distributions, communication between users
and the API server, and from the API server to the kubelets, is protected by SSL/TLS.
Secrets are protected when transmitted over these channels.






&lt;div style=&#34;margin-top: 10px; margin-bottom: 10px;&#34;&gt;
&lt;b&gt;功能特性状态:&lt;/b&gt; &lt;code&gt;Kubernetes v1.13 [beta]&lt;/code&gt;
&lt;/div&gt;



You can enable [encryption at rest](/docs/tasks/administer-cluster/encrypt-data/)
for secret data, so that the secrets are not stored in the clear into &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/administer-cluster/configure-upgrade-etcd/&#39; target=&#39;_blank&#39;&gt;etcd&lt;span class=&#39;tooltip-text&#39;&gt;用来存储 k8s 所有集群数据的一致性和高可用键值存储&lt;/span&gt;
&lt;/a&gt;.
 --&gt;
&lt;h2 id=&#34;security-properties&#34;&gt;安全属性&lt;/h2&gt;
&lt;h3 id=&#34;protections&#34;&gt;保护&lt;/h3&gt;
&lt;p&gt;因为 Secret 可以独立于使用它们的 Pod 外创建，这就使得 Secret 在创建，查看，和编辑 Pod 时，
暴露的风险减少。 系统还可以对 Secret 添加额外的保护， 比如，尽量避免将它们写入磁盘。&lt;/p&gt;
&lt;p&gt;Secret 只会在节点上有 Pod 需要它时才会发到这个节点。 kubelet 会将 Secret 存储在 &lt;code&gt;tmpfs&lt;/code&gt;，
这样 Secret 就不会被写入到磁盘存储。 当信赖这个 Secret 的 Pod 被删除时， kubelet 就会删除
本地的 Secret 数据备份。&lt;/p&gt;
&lt;p&gt;当一个节点上有多个 Secret 被多个 Pod 使用时。 只有被 Pod 请求的 Secret 才会在它的容器中可见。
因此， 一个 Pod 没有访问另一个 Pod 中的 Secret 的权限。&lt;/p&gt;
&lt;p&gt;Pod 中可能有多个容器，每个容器都可以在其 &lt;code&gt;volumeMounts&lt;/code&gt; 请求 Secret 卷，这样它就能在容器中。
这些可以用来构建有用的
&lt;a href=&#34;#use-case-secret-visible-to-one-container-in-a-pod&#34;&gt;Pod 级别的安全分隔&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;在大多数 k8s 发行版本中， 用户与 API 服务之间的通信， 和从 API 服务到 kubelet 通信, 是由 SSL/TLS
保护。 Secret 通过这些通道的传输是受保护的。&lt;/p&gt;





&lt;div style=&#34;margin-top: 10px; margin-bottom: 10px;&#34;&gt;
&lt;b&gt;功能特性状态:&lt;/b&gt; &lt;code&gt;Kubernetes v1.13 [beta]&lt;/code&gt;
&lt;/div&gt;


&lt;p&gt;用户也可以启用对 Secret 数据
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/tasks/administer-cluster/encrypt-data/&#34;&gt;加密&lt;/a&gt;，
，这样 Secret 不会以明文的形式存入
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/administer-cluster/configure-upgrade-etcd/&#39; target=&#39;_blank&#39;&gt;etcd&lt;span class=&#39;tooltip-text&#39;&gt;用来存储 k8s 所有集群数据的一致性和高可用键值存储&lt;/span&gt;
&lt;/a&gt;.&lt;/p&gt;
&lt;!--
### Risks

 - In the API server, secret data is stored in &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/administer-cluster/configure-upgrade-etcd/&#39; target=&#39;_blank&#39;&gt;etcd&lt;span class=&#39;tooltip-text&#39;&gt;用来存储 k8s 所有集群数据的一致性和高可用键值存储&lt;/span&gt;
&lt;/a&gt;;
   therefore:
   - Administrators should enable encryption at rest for cluster data (requires v1.13 or later).
   - Administrators should limit access to etcd to admin users.
   - Administrators may want to wipe/shred disks used by etcd when no longer in use.
   - If running etcd in a cluster, administrators should make sure to use SSL/TLS
     for etcd peer-to-peer communication.
 - If you configure the secret through a manifest (JSON or YAML) file which has
   the secret data encoded as base64, sharing this file or checking it in to a
   source repository means the secret is compromised. Base64 encoding is _not_ an
   encryption method and is considered the same as plain text.
 - Applications still need to protect the value of secret after reading it from the volume,
   such as not accidentally logging it or transmitting it to an untrusted party.
 - A user who can create a Pod that uses a secret can also see the value of that secret. Even
   if the API server policy does not allow that user to read the Secret, the user could
   run a Pod which exposes the secret.
 - Currently, anyone with root permission on any node can read _any_ secret from the API server,
   by impersonating the kubelet. It is a planned feature to only send secrets to
   nodes that actually require them, to restrict the impact of a root exploit on a
   single node.
 --&gt;
&lt;h3 id=&#34;risks&#34;&gt;风险&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 API 服务中，Secret 的数据被存储在
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/administer-cluster/configure-upgrade-etcd/&#39; target=&#39;_blank&#39;&gt;etcd&lt;span class=&#39;tooltip-text&#39;&gt;用来存储 k8s 所有集群数据的一致性和高可用键值存储&lt;/span&gt;
&lt;/a&gt;;
因此:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理员应该启动对集群数据的静态加密(需要 k8s v1.13+)&lt;/li&gt;
&lt;li&gt;管理员应该限制只有管理员能访问 etcd&lt;/li&gt;
&lt;li&gt;管理员可能希望对 etcd 不再使用的存储磁盘，进行清除/粉碎&lt;/li&gt;
&lt;li&gt;如果在集群中运行 etcd, 管理员应该保证在 etcd 的点对点通信之间使用 SSL/TLS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果用户通过配置(JSON 或 YAML)文件来管理 Secret, Secret 中数据是进行 base64， 分享这些
文件或将其提供到源代码系统就意味着 Secret 已经泄漏。 Base64 编码并 &lt;em&gt;不&lt;/em&gt; 是一种加密方式，
其实和明文没啥区别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用在从卷中读取到 Secret 的值后还是要注意保护，例如不要意外地写入日志或传输到一个不受信的部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果一个用户可以创建一个使用 Secret 的 Pod 就代表他们可以看到 Secret 的值。即便 API 服务
的策略不允许这个用户读取 Secret, 用户也可以通过运行一个可以暴露 Secret 的 Pod&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目前，任何在任意节点上有 root 权限的用户，可以冒充 kubelet 从 API 服务读取 &lt;em&gt;任意&lt;/em&gt; Secret,
有一个计划的特性将只允许将 Secret 发送给那些真的需要它的节点，来避免单个节点上被其它 root
权限用户访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关资料&#34;&gt;相关资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实践 &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/configmap-secret/managing-secret-using-kubectl/&#34;&gt;使用 &lt;code&gt;kubectl&lt;/code&gt; 管理 Secret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;实践 &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/configmap-secret/managing-secret-using-config-file/&#34;&gt;使用配置文件管理 Secret &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;实践 &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/configmap-secret/managing-secret-using-kustomize/&#34;&gt;使用 kustomize 管理 Secret&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 管理容器资源</title>
      <link>https://lostsquirrel.github.io/k8sDocs/docs/concepts/configuration/manage-resources-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/docs/concepts/configuration/manage-resources-containers/</guid>
      <description>
        
        
        &lt;!--
---
title: Managing Resources for Containers
content_type: concept
weight: 40
feature:
  title: Automatic bin packing
  description: &gt;
    Automatically places containers based on their resource requirements and other constraints, while not sacrificing availability. Mix critical and best-effort workloads in order to drive up utilization and save even more resources.
---
 --&gt;
&lt;!-- overview --&gt;
&lt;!--
When you specify a &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/concepts/workloads/pods/&#39; target=&#39;_blank&#39;&gt;Pod&lt;span class=&#39;tooltip-text&#39;&gt;Pod 表示集群中运行的一组容器的集合&lt;/span&gt;
&lt;/a&gt;, you can optionally specify how
much of each resource a &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/concepts/overview/what-is-kubernetes/#why-containers&#39; target=&#39;_blank&#39;&gt;Container&lt;span class=&#39;tooltip-text&#39;&gt;一个包含应用及其所有信赖的轻量的可移植的可运行的镜像&lt;/span&gt;
&lt;/a&gt; needs.
The most common resources to specify are CPU and memory (RAM); there are others.

When you specify the resource _request_ for Containers in a Pod, the scheduler uses this
information to decide which node to place the Pod on. When you specify a resource _limit_
for a Container, the kubelet enforces those limits so that the running container is not
allowed to use more of that resource than the limit you set. The kubelet also reserves
at least the _request_ amount of that system resource specifically for that container
to use.
 --&gt;
&lt;p&gt;在配置一个
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/concepts/workloads/pods/&#39; target=&#39;_blank&#39;&gt;Pod&lt;span class=&#39;tooltip-text&#39;&gt;Pod 表示集群中运行的一组容器的集合&lt;/span&gt;
&lt;/a&gt;
时，用户可以选择对每个
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/concepts/overview/what-is-kubernetes/#why-containers&#39; target=&#39;_blank&#39;&gt;Container&lt;span class=&#39;tooltip-text&#39;&gt;一个包含应用及其所有信赖的轻量的可移植的可运行的镜像&lt;/span&gt;
&lt;/a&gt;
设置其所使用的资源。
最常设置的资源是 CPU 和 内存 (RAM); 但还是有其他的。&lt;/p&gt;
&lt;p&gt;当用户为一个 Pod 中的容器设置资源 &lt;em&gt;请求&lt;/em&gt; ，调度器会使用这些信息来决定将 Pod 放到哪个节点上。
当为容器设置资源 &lt;em&gt;限制&lt;/em&gt; 时， kubelet 会执行这些限制以保证容器在运行时使用的资源不会超过这个设置
的资源限制。 kubelet 也会为这些容器保留资源 &lt;em&gt;请求&lt;/em&gt; 所设置的的资源的数量给予容器使用。&lt;/p&gt;
&lt;!-- body --&gt;
&lt;!--
## Requests and limits

If the node where a Pod is running has enough of a resource available, it&#39;s possible (and
allowed) for a container to use more resource than its `request` for that resource specifies.
However, a container is not allowed to use more than its resource `limit`.

For example, if you set a `memory` request of 256 MiB for a container, and that container is in
a Pod scheduled to a Node with 8GiB of memory and no other Pods, then the container can try to use
more RAM.

If you set a `memory` limit of 4GiB for that Container, the kubelet (and
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/docs/setup/production-environment/container-runtimes&#39; target=&#39;_blank&#39;&gt;container runtime&lt;span class=&#39;tooltip-text&#39;&gt;容器运行环境就是负责运行容器的软件&lt;/span&gt;
&lt;/a&gt;) enforce the limit.
The runtime prevents the container from using more than the configured resource limit. For example:
when a process in the container tries to consume more than the allowed amount of memory,
the system kernel terminates the process that attempted the allocation, with an out of memory
(OOM) error.

Limits can be implemented either reactively (the system intervenes once it sees a violation)
or by enforcement (the system prevents the container from ever exceeding the limit). Different
runtimes can have different ways to implement the same restrictions.

&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; If a Container specifies its own memory limit, but does not specify a memory request, Kubernetes
automatically assigns a memory request that matches the limit. Similarly, if a Container specifies its own
CPU limit, but does not specify a CPU request, Kubernetes automatically assigns a CPU request that matches
the limit.&lt;/div&gt;
&lt;/blockquote&gt;

 --&gt;
&lt;h2 id=&#34;requests-and-limits&#34;&gt;请求与限制&lt;/h2&gt;
&lt;p&gt;如果 Pod 运行的节点上的某种资源足够， 这就使得这个容器可能(也允许)使用比 &lt;code&gt;request&lt;/code&gt; 所设置的资源
更多的资源，但容器不能使用比 &lt;code&gt;limit&lt;/code&gt; 设置的资源的限制。&lt;/p&gt;
&lt;p&gt;例如， 如果设置容器的 &lt;code&gt;memory&lt;/code&gt; 资源请求为 256 MiB，然后容器所在的 Pod 被调度到一个有 8GiB
内存的节点上并且这个节点上没有其它的 Pod， 这时容器就可以常用使用更多的 RAM.&lt;/p&gt;
&lt;p&gt;如果设置了容器 &lt;code&gt;memory&lt;/code&gt; 限制为 4GiB， kubelet
(和 &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/docs/setup/production-environment/container-runtimes&#39; target=&#39;_blank&#39;&gt;容器运行环境&lt;span class=&#39;tooltip-text&#39;&gt;容器运行环境就是负责运行容器的软件&lt;/span&gt;
&lt;/a&gt;)
会执行这个限制。容器运行环境会防止容器使用超过容器资源限制所配置的资源数额。 例如，当容器中的一
个进行尝试使用超过允许的内存数量，系统内核就会终止这个尝试申请的进程，错误信息的内存不足(OOM).&lt;/p&gt;
&lt;p&gt;这些限制的实现可以是反应式的(当发现起限时系统干涉)或通过强制(系统防止容器使用超过限制资源)。
不同容器运行环境可能以不同的方式实现同样的限制。&lt;/p&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; 如果一个容器设置内存限制(&lt;code&gt;limit&lt;/code&gt;)，但没有设置内存请求(&lt;code&gt;request&lt;/code&gt;)，k8s 会自动为其分配一个与限制数额相同的请求。类似地
如果容器指定 CPU 限制(&lt;code&gt;limit&lt;/code&gt;)，但没设置 CPU 请求(&lt;code&gt;request&lt;/code&gt;)， k8s 会自动为其分配一个与限制数额相同的请求。&lt;/div&gt;
&lt;/blockquote&gt;

&lt;!--
## Resource types

*CPU* and *memory* are each a *resource type*. A resource type has a base unit.
CPU represents compute processing and is specified in units of [Kubernetes CPUs](#meaning-of-cpu).
Memory is specified in units of bytes.
If you&#39;re using Kubernetes v1.14 or newer, you can specify _huge page_ resources.
Huge pages are a Linux-specific feature where the node kernel allocates blocks of memory
that are much larger than the default page size.

For example, on a system where the default page size is 4KiB, you could specify a limit,
`hugepages-2Mi: 80Mi`. If the container tries allocating over 40 2MiB huge pages (a
total of 80 MiB), that allocation fails.

&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; You cannot overcommit &lt;code&gt;hugepages-*&lt;/code&gt; resources.
This is different from the &lt;code&gt;memory&lt;/code&gt; and &lt;code&gt;cpu&lt;/code&gt; resources.&lt;/div&gt;
&lt;/blockquote&gt;


CPU and memory are collectively referred to as *compute resources*, or just
*resources*. Compute
resources are measurable quantities that can be requested, allocated, and
consumed. They are distinct from
[API resources](/docs/concepts/overview/kubernetes-api/). API resources, such as Pods and
[Services](/docs/concepts/services-networking/service/) are objects that can be read and modified
through the Kubernetes API server.
 --&gt;
&lt;h2 id=&#34;resource-types&#34;&gt;资源类型&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;CPU&lt;/em&gt; 和 &lt;em&gt;memory&lt;/em&gt; 都是 &lt;em&gt;资源类型&lt;/em&gt; 的一种。 每种资源类型都有一个基础单位。CPU 代表计算处理
并以
&lt;a href=&#34;#meaning-of-cpu&#34;&gt;Kubernetes CPUs&lt;/a&gt;
为设置的基础单位。 内存是以字节为单位来设置的。 如果使用的是 k8s v1.14+, 可以设置 &lt;em&gt;huge page&lt;/em&gt; 资源。
Huge page 是一个 Linux 的特性，当节点内存分配内存块时可以多默认的 page size 大很多&lt;/p&gt;
&lt;p&gt;例如，在一个系统中默认的 page size 是 4KiB, 设置了一个限制为 &lt;code&gt;hugepages-2Mi: 80Mi&lt;/code&gt;.
如果容器尝试分配了超出 40 个 2Mib 的 huge page(总共就是 80 Mib), 这个分配就会失败。&lt;/p&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; 用户并不能过量使用 &lt;code&gt;hugepages-*&lt;/code&gt; 资源。 这与 &lt;code&gt;memory&lt;/code&gt; 与 &lt;code&gt;cpu&lt;/code&gt; 资源不同。&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;CPU 和 内存都可以被认为是 &lt;em&gt;计算资源&lt;/em&gt;, 或者直接称为 &lt;em&gt;资源&lt;/em&gt;。 计算资源作为可以请求，分配，和使用
的可量化资源。 他们与
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/overview/kubernetes-api/&#34;&gt;API 资源&lt;/a&gt; 不同的。 API 资源，如
Pod 和
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/services-networking/service/&#34;&gt;Services&lt;/a&gt;
是可以通过 k8s API 服务读取和修改的对象。&lt;/p&gt;
&lt;!--
## Resource requests and limits of Pod and Container

Each Container of a Pod can specify one or more of the following:

* `spec.containers[].resources.limits.cpu`
* `spec.containers[].resources.limits.memory`
* `spec.containers[].resources.limits.hugepages-&lt;size&gt;`
* `spec.containers[].resources.requests.cpu`
* `spec.containers[].resources.requests.memory`
* `spec.containers[].resources.requests.hugepages-&lt;size&gt;`

Although requests and limits can only be specified on individual Containers, it
is convenient to talk about Pod resource requests and limits. A
*Pod resource request/limit* for a particular resource type is the sum of the
resource requests/limits of that type for each Container in the Pod.
--&gt;
&lt;h2 id=&#34;resource-requests-and-limits-of-pod-and-container&#34;&gt;Pod 和 容器对资源的请求和限制&lt;/h2&gt;
&lt;p&gt;一个 Pod 中的每个容器都可以指定以下配置中的一个或多个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec.containers[].resources.limits.cpu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.containers[].resources.limits.memory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.containers[].resources.limits.hugepages-&amp;lt;size&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.containers[].resources.requests.memory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.containers[].resources.requests.hugepages-&amp;lt;size&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管资源请求和限制只能被设置在独立的容器上，对 Pod 资源的请求和限制也是很方便的。
对于一个特定类别的 &lt;em&gt;Pod 资源请求/限制&lt;/em&gt;就是 Pod 中所有容器该类型的资源 请求/限制 的总和。&lt;/p&gt;
&lt;!--
## Resource units in Kubernetes

### Meaning of CPU

Limits and requests for CPU resources are measured in *cpu* units.
One cpu, in Kubernetes, is equivalent to **1 vCPU/Core** for cloud providers and **1 hyperthread** on bare-metal Intel processors.

Fractional requests are allowed. A Container with
`spec.containers[].resources.requests.cpu` of `0.5` is guaranteed half as much
CPU as one that asks for 1 CPU. The expression `0.1` is equivalent to the
expression `100m`, which can be read as &#34;one hundred millicpu&#34;. Some people say
&#34;one hundred millicores&#34;, and this is understood to mean the same thing. A
request with a decimal point, like `0.1`, is converted to `100m` by the API, and
precision finer than `1m` is not allowed. For this reason, the form `100m` might
be preferred.

CPU is always requested as an absolute quantity, never as a relative quantity;
0.1 is the same amount of CPU on a single-core, dual-core, or 48-core machine.
 --&gt;
&lt;h2 id=&#34;resource-units-in-kubernetes&#34;&gt;k8s 中的资源单元&lt;/h2&gt;
&lt;h3 id=&#34;meaning-of-cpu&#34;&gt;CPU 的含义&lt;/h3&gt;
&lt;p&gt;对 CPU 资源的请求和限制是以 &lt;em&gt;cpu&lt;/em&gt; 的单元来计量的。在 k8s 中 1 个单位的 CPU， 与其等效的是
云提供商的 &lt;strong&gt;1 个核心(vCPU/Core)&lt;/strong&gt; 和 是裸金属的 Intel 处理器的 &lt;strong&gt;1 个超线程(hyperthread)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;允许使用小数的请求。 一个容器中如果设置 &lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt; 为
&lt;code&gt;0.5&lt;/code&gt; 就表示它至少要保证提供给容器二分之一个 CPU 的资源。 &lt;code&gt;0.1&lt;/code&gt; 等同与 &lt;code&gt;100m&lt;/code&gt;， 可以被读作
&amp;ldquo;一百微 CPU&amp;rdquo;. 也有人说的是 &amp;ldquo;一百微核心&amp;rdquo;，只要知道这说的是一个意思就行。 配置中如果设置为像
&lt;code&gt;0.1&lt;/code&gt; 这样的小数，会被 API 转化为 &lt;code&gt;100m&lt;/code&gt;，不能设置比 &lt;code&gt;1m&lt;/code&gt; 更小的粒度。所以 &lt;code&gt;100m&lt;/code&gt; 这种格式
更合用。&lt;/p&gt;
&lt;p&gt;CPU 始终是以绝对数量请求的，绝不是相对数量； 0.1 在单核，双核，48 核的机器表示是一样的数量。&lt;/p&gt;
&lt;!--
### Meaning of memory

Limits and requests for `memory` are measured in bytes. You can express memory as
a plain integer or as a fixed-point number using one of these suffixes:
E, P, T, G, M, K. You can also use the power-of-two equivalents: Ei, Pi, Ti, Gi,
Mi, Ki. For example, the following represent roughly the same value:

```shell
128974848, 129e6, 129M, 123Mi
```

Here&#39;s an example.
The following Pod has two Containers. Each Container has a request of 0.25 cpu
and 64MiB (2&lt;sup&gt;26&lt;/sup&gt; bytes) of memory. Each Container has a limit of 0.5
cpu and 128MiB of memory. You can say the Pod has a request of 0.5 cpu and 128
MiB of memory, and a limit of 1 cpu and 256MiB of memory.

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: frontend
spec:
  containers:
  - name: app
    image: images.my-company.example/app:v4
    resources:
      requests:
        memory: &#34;64Mi&#34;
        cpu: &#34;250m&#34;
      limits:
        memory: &#34;128Mi&#34;
        cpu: &#34;500m&#34;
  - name: log-aggregator
    image: images.my-company.example/log-aggregator:v6
    resources:
      requests:
        memory: &#34;64Mi&#34;
        cpu: &#34;250m&#34;
      limits:
        memory: &#34;128Mi&#34;
        cpu: &#34;500m&#34;
```
 --&gt;
&lt;h3 id=&#34;meaning-of-memory&#34;&gt;内存的含义&lt;/h3&gt;
&lt;p&gt;对 &lt;code&gt;memory&lt;/code&gt; 的请求和限制是字节来计量的。 可以直接以整数或小数加以下后缀中的一个: E, P, T, G, M, K.
也可以使用 2 的幂的计量单位: Ei, Pi, Ti, Gi, Mi, Ki. 例如，下面几个值的值大约是相等的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;128974848, 129e6, 129M, 123Mi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面是一个例子。下面这个 Pod 中有两个容器。 每个容器请求 0.25 CPU 和 64MiB (2&lt;sup&gt;26&lt;/sup&gt; 字节)内存。
每个容器限制 0.5 CPU 和 128MiB 内存。 这样就可以说这个 Pod 请求了 0.5 CPU 和 128 MiB 内存，
限制为 1 CPU 和 256MiB 内存。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;frontend&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;app&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;images.my-company.example/app:v4&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;64Mi&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;250m&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;limits&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;128Mi&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;500m&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;log-aggregator&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;images.my-company.example/log-aggregator:v6&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;64Mi&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;250m&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;limits&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;128Mi&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;500m&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--
## How Pods with resource requests are scheduled

When you create a Pod, the Kubernetes scheduler selects a node for the Pod to
run on. Each node has a maximum capacity for each of the resource types: the
amount of CPU and memory it can provide for Pods. The scheduler ensures that,
for each resource type, the sum of the resource requests of the scheduled
Containers is less than the capacity of the node. Note that although actual memory
or CPU resource usage on nodes is very low, the scheduler still refuses to place
a Pod on a node if the capacity check fails. This protects against a resource
shortage on a node when resource usage later increases, for example, during a
daily peak in request rate.
 --&gt;
&lt;h2 id=&#34;how-pods-with-resource-requests-are-scheduled&#34;&gt;带有资源请求的 Pod 是怎么调度的&lt;/h2&gt;
&lt;p&gt;当用户创建一个 Pod 时， k8s 调度器会为 Pod 选择一个节点让它在上面运行。 每个节点都有对每个资源
类型的最大容量: 可以供给 Pod 运行的 CPU 的数量和内存数量。调度器会确保被调度的容器所请求的
各种资源的总和要小于节点对应资源的容量。 即便节点上实际内存或 CPU 资源都很低，调度器依然会在容量
检查失败后拒绝将 Pod 放在这个节点上。 这是为了防止后续资源使用增加而导致资源短缺，例如，每天的
请求峰值。&lt;/p&gt;
&lt;!--
## How Pods with resource limits are run

When the kubelet starts a Container of a Pod, it passes the CPU and memory limits
to the container runtime.

When using Docker:

- The `spec.containers[].resources.requests.cpu` is converted to its core value,
  which is potentially fractional, and multiplied by 1024. The greater of this number
  or 2 is used as the value of the
  [`--cpu-shares`](https://docs.docker.com/engine/reference/run/#cpu-share-constraint)
  flag in the `docker run` command.

- The `spec.containers[].resources.limits.cpu` is converted to its millicore value and
  multiplied by 100. The resulting value is the total amount of CPU time that a container can use
  every 100ms. A container cannot use more than its share of CPU time during this interval.

  &lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; The default quota period is 100ms. The minimum resolution of CPU quota is 1ms.&lt;/div&gt;
&lt;/blockquote&gt;


- The `spec.containers[].resources.limits.memory` is converted to an integer, and
  used as the value of the
  [`--memory`](https://docs.docker.com/engine/reference/run/#/user-memory-constraints)
  flag in the `docker run` command.

If a Container exceeds its memory limit, it might be terminated. If it is
restartable, the kubelet will restart it, as with any other type of runtime
failure.

If a Container exceeds its memory request, it is likely that its Pod will
be evicted whenever the node runs out of memory.

A Container might or might not be allowed to exceed its CPU limit for extended
periods of time. However, it will not be killed for excessive CPU usage.

To determine whether a Container cannot be scheduled or is being killed due to
resource limits, see the
[Troubleshooting](#troubleshooting) section.
 --&gt;
&lt;h2 id=&#34;how-pods-with-resource-limits-are-run&#34;&gt;带有资源限制的 Pod 是怎么运行的&lt;/h2&gt;
&lt;p&gt;当 kubelet 为一个 Pod 启动一个容器时，它会给容器运行时传递 CPU 和 内存的限制。&lt;/p&gt;
&lt;p&gt;在使用 Docker 时:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt; 会被转化为核心值，一般来说它很可能是个小数，
并乘上 1024，得出的结果与 2 相比比较大的一个会作为 &lt;code&gt;docker run&lt;/code&gt; 命令的
&lt;a href=&#34;https://docs.docker.com/engine/reference/run/#cpu-share-constraint&#34;&gt;&lt;code&gt;--cpu-shares&lt;/code&gt;&lt;/a&gt;
的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spec.containers[].resources.limits.cpu&lt;/code&gt; 会被转化为微核心值并乘以 100. 得出的结果就是
每 100ms 中这个容器可以使用的 CPU 时间。容器在每个时间段不能使用超出其限制的 CPU 时间&lt;/p&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; 默认的配额时间段是 100ms， CPU 配置的最小粒度是 1ms&lt;/div&gt;
&lt;/blockquote&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spec.containers[].resources.limits.memory&lt;/code&gt; 会被转化为一个整数，并作为 &lt;code&gt;docker run&lt;/code&gt;
命令的
&lt;a href=&#34;https://docs.docker.com/engine/reference/run/#/user-memory-constraints&#34;&gt;&lt;code&gt;--memory&lt;/code&gt;&lt;/a&gt;
标记的值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果容器超出了内存限制，它就可能被终止。 如果容器是可以重启的，kubelet 就会把它重启了，就像任意
其它类型的运行失败一样。&lt;/p&gt;
&lt;p&gt;如果一个容器超出了其请求的内存，它会在节点内存耗尽时被踢出去。&lt;/p&gt;
&lt;p&gt;一个容器可能允许也可能不允许超出 CPU 使用时间限制。 但是它不会因为 CPU 使用超限而被杀掉。&lt;/p&gt;
&lt;p&gt;决定容器不能被调度或因资源限制而被杀掉的因素见 &lt;a href=&#34;#troubleshooting&#34;&gt;故障检查&lt;/a&gt; 章节&lt;/p&gt;
&lt;!--
### Monitoring compute &amp; memory resource usage

The resource usage of a Pod is reported as part of the Pod status.

If optional [tools for monitoring](/docs/tasks/debug-application-cluster/resource-usage-monitoring/)
are available in your cluster, then Pod resource usage can be retrieved either
from the [Metrics API](/docs/tasks/debug-application-cluster/resource-metrics-pipeline/#the-metrics-api)
directly or from your monitoring tools.
 --&gt;
&lt;h3 id=&#34;monitoring-compute-memory-resource-usage&#34;&gt;监控计算和内存资源使用&lt;/h3&gt;
&lt;p&gt;Pod 所使用的资源会作为 Pod 状态报告的一部分出现。&lt;/p&gt;
&lt;p&gt;如果集群中有可选的
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/debug-application-cluster/resource-usage-monitoring/&#34;&gt;监控工具&lt;/a&gt;，
Pod 资源使用可以通过
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/tasks/debug-application-cluster/resource-metrics-pipeline/#the-metrics-api&#34;&gt;Metrics API&lt;/a&gt;
或直接通过监控工作中的一种中获取。&lt;/p&gt;
&lt;!-- feature gate LocalStorageCapacityIsolation --&gt;
&lt;!--
## Local ephemeral storage







&lt;div style=&#34;margin-top: 10px; margin-bottom: 10px;&#34;&gt;
&lt;b&gt;功能特性状态:&lt;/b&gt; &lt;code&gt;Kubernetes v1.10 [beta]&lt;/code&gt;
&lt;/div&gt;



Nodes have local ephemeral storage, backed by
locally-attached writeable devices or, sometimes, by RAM.
&#34;Ephemeral&#34; means that there is no long-term guarantee about durability.

Pods use ephemeral local storage for scratch space, caching, and for logs.
The kubelet can provide scratch space to Pods using local ephemeral storage to
mount [`emptyDir`](/docs/concepts/storage/volumes/#emptydir)
 &lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/storage/volumes/&#39; target=&#39;_blank&#39;&gt;volumes&lt;span class=&#39;tooltip-text&#39;&gt;一个可以被 Pod 中的容器访问的包含数据的目录&lt;/span&gt;
&lt;/a&gt; into containers.

The kubelet also uses this kind of storage to hold
[node-level container logs](/docs/concepts/cluster-administration/logging/#logging-at-the-node-level),
container images, and the writable layers of running containers.

&lt;blockquote class=&#34;caution&#34;&gt;
  &lt;div&gt;&lt;strong&gt;注意：&lt;/strong&gt; If a node fails, the data in its ephemeral storage can be lost.&lt;br&gt;
Your applications cannot expect any performance SLAs (disk IOPS for example)
from local ephemeral storage.&lt;/div&gt;
&lt;/blockquote&gt;


As a beta feature, Kubernetes lets you track, reserve and limit the amount
of ephemeral local storage a Pod can consume.
 --&gt;
&lt;h2 id=&#34;local-ephemeral-storage&#34;&gt;本地临时存储&lt;/h2&gt;
&lt;!-- feature gate LocalStorageCapacityIsolation --&gt;





&lt;div style=&#34;margin-top: 10px; margin-bottom: 10px;&#34;&gt;
&lt;b&gt;功能特性状态:&lt;/b&gt; &lt;code&gt;Kubernetes v1.10 [beta]&lt;/code&gt;
&lt;/div&gt;


&lt;p&gt;节点有本地临时存储，这些存储由本地挂载可写设备或有时候是 RAM 来提供。&amp;ldquo;临时&amp;rdquo; 的意思就是对
数据的持久性没有长期保证。&lt;/p&gt;
&lt;p&gt;Pod 可以使用临时本地存储作为暂存空间，缓存或日志。 kubelet 可以使用临时本地存储提供暂存空间
来挂载
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/concepts/storage/volumes/#emptydir&#34;&gt;&lt;code&gt;emptyDir&lt;/code&gt;&lt;/a&gt;
到容器中的
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/storage/volumes/&#39; target=&#39;_blank&#39;&gt;卷(Volume)&lt;span class=&#39;tooltip-text&#39;&gt;一个可以被 Pod 中的容器访问的包含数据的目录&lt;/span&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kubelet 还可以使用这种类型的存储来放置
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/k8sDocs/docs/concepts/cluster-administration/logging/#logging-at-the-node-level&#34;&gt;节点级别的容器日志&lt;/a&gt;,
容器镜像，运行容器的可写层。&lt;/p&gt;
&lt;blockquote class=&#34;caution&#34;&gt;
  &lt;div&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果节点挂了，临时存储中的数据就可能丢失。并且应用并不能对本地临时存储有任何性能 SLA(例如,磁盘 IOPS)
有任何要求&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为一个 beta 特性， k8s 可以让用户跟踪，保留，限制一个 Pod 可以使用的临时本地存储。&lt;/p&gt;
&lt;h3 id=&#34;configurations-for-local-ephemeral-storage&#34;&gt;Configurations for local ephemeral storage&lt;/h3&gt;
&lt;p&gt;Kubernetes supports two ways to configure local ephemeral storage on a node:
&lt;div id=&#34;local_storage_configurations&#34;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#local_storage_configurations-0&#34;&gt;Single filesystem&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#local_storage_configurations-1&#34;&gt;Two filesystems&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id=&#34;local_storage_configurations-0&#34;&gt;&lt;p&gt;In this configuration, you place all different kinds of ephemeral local data
(&lt;code&gt;emptyDir&lt;/code&gt; volumes, writeable layers, container images, logs) into one filesystem.
The most effective way to configure the kubelet means dedicating this filesystem
to Kubernetes (kubelet) data.&lt;/p&gt;
&lt;p&gt;The kubelet also writes
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/concepts/cluster-administration/logging/#logging-at-the-node-level&#34;&gt;node-level container logs&lt;/a&gt;
and treats these similarly to ephemeral local storage.&lt;/p&gt;
&lt;p&gt;The kubelet writes logs to files inside its configured log directory (&lt;code&gt;/var/log&lt;/code&gt;
by default); and has a base directory for other locally stored data
(&lt;code&gt;/var/lib/kubelet&lt;/code&gt; by default).&lt;/p&gt;
&lt;p&gt;Typically, both &lt;code&gt;/var/lib/kubelet&lt;/code&gt; and &lt;code&gt;/var/log&lt;/code&gt; are on the system root filesystem,
and the kubelet is designed with that layout in mind.&lt;/p&gt;
&lt;p&gt;Your node can have as many other filesystems, not used for Kubernetes,
as you like.&lt;/p&gt;
&lt;/div&gt;&lt;div id=&#34;local_storage_configurations-1&#34;&gt;&lt;p&gt;You have a filesystem on the node that you&amp;rsquo;re using for ephemeral data that
comes from running Pods: logs, and &lt;code&gt;emptyDir&lt;/code&gt; volumes. You can use this filesystem
for other data (for example: system logs not related to Kubernetes); it can even
be the root filesystem.&lt;/p&gt;
&lt;p&gt;The kubelet also writes
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/concepts/cluster-administration/logging/#logging-at-the-node-level&#34;&gt;node-level container logs&lt;/a&gt;
into the first filesystem, and treats these similarly to ephemeral local storage.&lt;/p&gt;
&lt;p&gt;You also use a separate filesystem, backed by a different logical storage device.
In this configuration, the directory where you tell the kubelet to place
container image layers and writeable layers is on this second filesystem.&lt;/p&gt;
&lt;p&gt;The first filesystem does not hold any image layers or writeable layers.&lt;/p&gt;
&lt;p&gt;Your node can have as many other filesystems, not used for Kubernetes,
as you like.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;script&gt;$(function(){$(&#34;#local_storage_configurations&#34;).tabs();});&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;The kubelet can measure how much local storage it is using. It does this provided
that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;LocalStorageCapacityIsolation&lt;/code&gt;
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/reference/command-line-tools-reference/feature-gates/&#34;&gt;feature gate&lt;/a&gt;
is enabled (the feature is on by default), and&lt;/li&gt;
&lt;li&gt;you have set up the node using one of the supported configurations
for local ephemeral storage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have a different configuration, then the kubelet does not apply resource
limits for ephemeral local storage.&lt;/p&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; The kubelet tracks &lt;code&gt;tmpfs&lt;/code&gt; emptyDir volumes as container memory use, rather
than as local ephemeral storage.&lt;/div&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;setting-requests-and-limits-for-local-ephemeral-storage&#34;&gt;Setting requests and limits for local ephemeral storage&lt;/h3&gt;
&lt;p&gt;You can use &lt;em&gt;ephemeral-storage&lt;/em&gt; for managing local ephemeral storage. Each Container of a Pod can specify one or more of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec.containers[].resources.limits.ephemeral-storage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.containers[].resources.requests.ephemeral-storage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Limits and requests for &lt;code&gt;ephemeral-storage&lt;/code&gt; are measured in bytes. You can express storage as
a plain integer or as a fixed-point number using one of these suffixes:
E, P, T, G, M, K. You can also use the power-of-two equivalents: Ei, Pi, Ti, Gi,
Mi, Ki. For example, the following represent roughly the same value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;128974848, 129e6, 129M, 123Mi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the following example, the Pod has two Containers. Each Container has a request of 2GiB of local ephemeral storage. Each Container has a limit of 4GiB of local ephemeral storage. Therefore, the Pod has a request of 4GiB of local ephemeral storage, and a limit of 8GiB of local ephemeral storage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;frontend&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;app&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;images.my-company.example/app:v4&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;ephemeral-storage&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2Gi&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;limits&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;ephemeral-storage&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4Gi&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;log-aggregator&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;images.my-company.example/log-aggregator:v6&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;ephemeral-storage&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2Gi&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;limits&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;ephemeral-storage&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4Gi&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;how-pods-with-ephemeral-storage-requests-are-scheduled&#34;&gt;How Pods with ephemeral-storage requests are scheduled&lt;/h3&gt;
&lt;p&gt;When you create a Pod, the Kubernetes scheduler selects a node for the Pod to
run on. Each node has a maximum amount of local ephemeral storage it can provide for Pods. For more information, see &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/tasks/administer-cluster/reserve-compute-resources/#node-allocatable&#34;&gt;Node Allocatable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The scheduler ensures that the sum of the resource requests of the scheduled Containers is less than the capacity of the node.&lt;/p&gt;
&lt;h3 id=&#34;resource-emphemeralstorage-consumption&#34;&gt;Ephemeral storage consumption management&lt;/h3&gt;
&lt;p&gt;If the kubelet is managing local ephemeral storage as a resource, then the
kubelet measures storage use in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;emptyDir&lt;/code&gt; volumes, except &lt;em&gt;tmpfs&lt;/em&gt; &lt;code&gt;emptyDir&lt;/code&gt; volumes&lt;/li&gt;
&lt;li&gt;directories holding node-level logs&lt;/li&gt;
&lt;li&gt;writeable container layers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a Pod is using more ephemeral storage than you allow it to, the kubelet
sets an eviction signal that triggers Pod eviction.&lt;/p&gt;
&lt;p&gt;For container-level isolation, if a Container&amp;rsquo;s writable layer and log
usage exceeds its storage limit, the kubelet marks the Pod for eviction.&lt;/p&gt;
&lt;p&gt;For pod-level isolation the kubelet works out an overall Pod storage limit by
summing the limits for the containers in that Pod. In this case, if the sum of
the local ephemeral storage usage from all containers and also the Pod&amp;rsquo;s &lt;code&gt;emptyDir&lt;/code&gt;
volumes exceeds the overall Pod storage limit, then the kubelet also marks the Pod
for eviction.&lt;/p&gt;
&lt;blockquote class=&#34;caution&#34;&gt;
  &lt;div&gt;&lt;strong&gt;注意：&lt;/strong&gt; &lt;p&gt;If the kubelet is not measuring local ephemeral storage, then a Pod
that exceeds its local storage limit will not be evicted for breaching
local storage resource limits.&lt;/p&gt;
&lt;p&gt;However, if the filesystem space for writeable container layers, node-level logs,
or &lt;code&gt;emptyDir&lt;/code&gt; volumes falls low, the node
&lt;a class=&#39;glossary-tooltip&#39; href=&#39;https://lostsquirrel.github.io/k8sDocs/docs/concepts/scheduling-eviction/taint-and-toleration/&#39; target=&#39;_blank&#39;&gt;taints&lt;span class=&#39;tooltip-text&#39;&gt;A core object consisting of three required properties: key, value, and effect. Taints prevent the scheduling of pods on nodes or node groups.&lt;/span&gt;
&lt;/a&gt; itself as short on local storage
and this taint triggers eviction for any Pods that don&amp;rsquo;t specifically tolerate the taint.&lt;/p&gt;
&lt;p&gt;See the supported &lt;a href=&#34;#configurations-for-local-ephemeral-storage&#34;&gt;configurations&lt;/a&gt;
for ephemeral local storage.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;The kubelet supports different ways to measure Pod storage use:&lt;/p&gt;
&lt;div id=&#34;resource-emphemeralstorage-measurement&#34;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#resource-emphemeralstorage-measurement-0&#34;&gt;Periodic scanning&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#resource-emphemeralstorage-measurement-1&#34;&gt;Filesystem project quota&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id=&#34;resource-emphemeralstorage-measurement-0&#34;&gt;&lt;p&gt;The kubelet performs regular, scheduled checks that scan each
&lt;code&gt;emptyDir&lt;/code&gt; volume, container log directory, and writeable container layer.&lt;/p&gt;
&lt;p&gt;The scan measures how much space is used.&lt;/p&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; &lt;p&gt;In this mode, the kubelet does not track open file descriptors
for deleted files.&lt;/p&gt;
&lt;p&gt;If you (or a container) create a file inside an &lt;code&gt;emptyDir&lt;/code&gt; volume,
something then opens that file, and you delete the file while it is
still open, then the inode for the deleted file stays until you close
that file but the kubelet does not categorize the space as in use.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;div id=&#34;resource-emphemeralstorage-measurement-1&#34;&gt;&lt;div style=&#34;margin-top: 10px; margin-bottom: 10px;&#34;&gt;
&lt;b&gt;功能特性状态:&lt;/b&gt; &lt;code&gt;Kubernetes v1.15 [alpha]&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;Project quotas are an operating-system level feature for managing
storage use on filesystems. With Kubernetes, you can enable project
quotas for monitoring storage use. Make sure that the filesystem
backing the &lt;code&gt;emptyDir&lt;/code&gt; volumes, on the node, provides project quota support.
For example, XFS and ext4fs offer project quotas.&lt;/p&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; Project quotas let you monitor storage use; they do not enforce limits.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kubernetes uses project IDs starting from &lt;code&gt;1048576&lt;/code&gt;. The IDs in use are
registered in &lt;code&gt;/etc/projects&lt;/code&gt; and &lt;code&gt;/etc/projid&lt;/code&gt;. If project IDs in
this range are used for other purposes on the system, those project
IDs must be registered in &lt;code&gt;/etc/projects&lt;/code&gt; and &lt;code&gt;/etc/projid&lt;/code&gt; so that
Kubernetes does not use them.&lt;/p&gt;
&lt;p&gt;Quotas are faster and more accurate than directory scanning. When a
directory is assigned to a project, all files created under a
directory are created in that project, and the kernel merely has to
keep track of how many blocks are in use by files in that project.&lt;br&gt;
If a file is created and deleted, but has an open file descriptor,
it continues to consume space. Quota tracking records that space accurately
whereas directory scans overlook the storage used by deleted files.&lt;/p&gt;
&lt;p&gt;If you want to use project quotas, you should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Enable the &lt;code&gt;LocalStorageCapacityIsolationFSQuotaMonitoring=true&lt;/code&gt;
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/reference/command-line-tools-reference/feature-gates/&#34;&gt;feature gate&lt;/a&gt;
in the kubelet configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure that the root filesystem (or optional runtime filesystem)
has project quotas enabled. All XFS filesystems support project quotas.
For ext4 filesystems, you need to enable the project quota tracking feature
while the filesystem is not mounted.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# For ext4, with /dev/block-device not mounted&lt;/span&gt;
sudo tune2fs -O project -Q prjquota /dev/block-device
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure that the root filesystem (or optional runtime filesystem) is
mounted with project quotas enabled. For both XFS and ext4fs, the
mount option is named &lt;code&gt;prjquota&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;script&gt;$(function(){$(&#34;#resource-emphemeralstorage-measurement&#34;).tabs();});&lt;/script&gt;
&lt;h2 id=&#34;extended-resources&#34;&gt;Extended resources&lt;/h2&gt;
&lt;p&gt;Extended resources are fully-qualified resource names outside the
&lt;code&gt;kubernetes.io&lt;/code&gt; domain. They allow cluster operators to advertise and users to
consume the non-Kubernetes-built-in resources.&lt;/p&gt;
&lt;p&gt;There are two steps required to use Extended Resources. First, the cluster
operator must advertise an Extended Resource. Second, users must request the
Extended Resource in Pods.&lt;/p&gt;
&lt;h3 id=&#34;managing-extended-resources&#34;&gt;Managing extended resources&lt;/h3&gt;
&lt;h4 id=&#34;node-level-extended-resources&#34;&gt;Node-level extended resources&lt;/h4&gt;
&lt;p&gt;Node-level extended resources are tied to nodes.&lt;/p&gt;
&lt;h5 id=&#34;device-plugin-managed-resources&#34;&gt;Device plugin managed resources&lt;/h5&gt;
&lt;p&gt;See &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/&#34;&gt;Device
Plugin&lt;/a&gt;
for how to advertise device plugin managed resources on each node.&lt;/p&gt;
&lt;h5 id=&#34;other-resources&#34;&gt;Other resources&lt;/h5&gt;
&lt;p&gt;To advertise a new node-level extended resource, the cluster operator can
submit a &lt;code&gt;PATCH&lt;/code&gt; HTTP request to the API server to specify the available
quantity in the &lt;code&gt;status.capacity&lt;/code&gt; for a node in the cluster. After this
operation, the node&amp;rsquo;s &lt;code&gt;status.capacity&lt;/code&gt; will include a new resource. The
&lt;code&gt;status.allocatable&lt;/code&gt; field is updated automatically with the new resource
asynchronously by the kubelet. Note that because the scheduler uses the	node
&lt;code&gt;status.allocatable&lt;/code&gt; value when evaluating Pod fitness, there may be a short
delay between patching the node capacity with a new resource and the first Pod
that requests the resource to be scheduled on that node.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here is an example showing how to use &lt;code&gt;curl&lt;/code&gt; to form an HTTP request that
advertises five &amp;ldquo;example.com/foo&amp;rdquo; resources on node &lt;code&gt;k8s-node-1&lt;/code&gt; whose master
is &lt;code&gt;k8s-master&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl --header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type: application/json-patch+json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--request PATCH &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--data &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[{&amp;#34;op&amp;#34;: &amp;#34;add&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/status/capacity/example.com~1foo&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;5&amp;#34;}]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;http://k8s-master:8080/api/v1/nodes/k8s-node-1/status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; In the preceding request, &lt;code&gt;~1&lt;/code&gt; is the encoding for the character &lt;code&gt;/&lt;/code&gt;
in the patch path. The operation path value in JSON-Patch is interpreted as a
JSON-Pointer. For more details, see
&lt;a href=&#34;https://tools.ietf.org/html/rfc6901#section-3&#34;&gt;IETF RFC 6901, section 3&lt;/a&gt;.&lt;/div&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;cluster-level-extended-resources&#34;&gt;Cluster-level extended resources&lt;/h4&gt;
&lt;p&gt;Cluster-level extended resources are not tied to nodes. They are usually managed
by scheduler extenders, which handle the resource consumption and resource quota.&lt;/p&gt;
&lt;p&gt;You can specify the extended resources that are handled by scheduler extenders
in &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.10/pkg/scheduler/api/v1/types.go#L31&#34;&gt;scheduler policy
configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following configuration for a scheduler policy indicates that the
cluster-level extended resource &amp;ldquo;example.com/foo&amp;rdquo; is handled by the scheduler
extender.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The scheduler sends a Pod to the scheduler extender only if the Pod requests
&amp;ldquo;example.com/foo&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ignoredByScheduler&lt;/code&gt; field specifies that the scheduler does not check
the &amp;ldquo;example.com/foo&amp;rdquo; resource in its &lt;code&gt;PodFitsResources&lt;/code&gt; predicate.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Policy&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;extenders&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;urlPrefix&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;extender-endpoint&amp;gt;&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bindVerb&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bind&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;managedResources&amp;#34;&lt;/span&gt;: [
        {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com/foo&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ignoredByScheduler&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;consuming-extended-resources&#34;&gt;Consuming extended resources&lt;/h3&gt;
&lt;p&gt;Users can consume extended resources in Pod specs just like CPU and memory.
The scheduler takes care of the resource accounting so that no more than the
available amount is simultaneously allocated to Pods.&lt;/p&gt;
&lt;p&gt;The API server restricts quantities of extended resources to whole numbers.
Examples of &lt;em&gt;valid&lt;/em&gt; quantities are &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;3000m&lt;/code&gt; and &lt;code&gt;3Ki&lt;/code&gt;. Examples of
&lt;em&gt;invalid&lt;/em&gt; quantities are &lt;code&gt;0.5&lt;/code&gt; and &lt;code&gt;1500m&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; Extended resources replace Opaque Integer Resources.
Users can use any domain name prefix other than &lt;code&gt;kubernetes.io&lt;/code&gt; which is reserved.&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;To consume an extended resource in a Pod, include the resource name as a key
in the &lt;code&gt;spec.containers[].resources.limits&lt;/code&gt; map in the container spec.&lt;/p&gt;
&lt;blockquote class=&#34;note&#34;&gt;
  &lt;div&gt;&lt;strong&gt;说明：&lt;/strong&gt; Extended resources cannot be overcommitted, so request and limit
must be equal if both are present in a container spec.&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Pod is scheduled only if all of the resource requests are satisfied, including
CPU, memory and any extended resources. The Pod remains in the &lt;code&gt;PENDING&lt;/code&gt; state
as long as the resource request cannot be satisfied.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Pod below requests 2 CPUs and 1 &amp;ldquo;example.com/foo&amp;rdquo; (an extended resource).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-container&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;myimage&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;example.com/foo&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;limits&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;example.com/foo&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pid-limiting&#34;&gt;PID limiting&lt;/h2&gt;
&lt;p&gt;Process ID (PID) limits allow for the configuration of a kubelet to limit the number of PIDs that a given Pod can consume. See &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/concepts/policy/pid-limiting/&#34;&gt;Pid Limiting&lt;/a&gt; for information.&lt;/p&gt;
&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;h3 id=&#34;my-pods-are-pending-with-event-message-failedscheduling&#34;&gt;My Pods are pending with event message failedScheduling&lt;/h3&gt;
&lt;p&gt;If the scheduler cannot find any node where a Pod can fit, the Pod remains
unscheduled until a place can be found. An event is produced each time the
scheduler fails to find a place for the Pod, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl describe pod frontend | grep -A &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Events
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Events:
  FirstSeen LastSeen   Count  From          Subobject   PathReason      Message
  36s   5s     6      {scheduler }              FailedScheduling  Failed for reason PodExceedsFreeCPU and possibly others
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the preceding example, the Pod named &amp;ldquo;frontend&amp;rdquo; fails to be scheduled due to
insufficient CPU resource on the node. Similar error messages can also suggest
failure due to insufficient memory (PodExceedsFreeMemory). In general, if a Pod
is pending with a message of this type, there are several things to try:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add more nodes to the cluster.&lt;/li&gt;
&lt;li&gt;Terminate unneeded Pods to make room for pending Pods.&lt;/li&gt;
&lt;li&gt;Check that the Pod is not larger than all the nodes. For example, if all the
nodes have a capacity of &lt;code&gt;cpu: 1&lt;/code&gt;, then a Pod with a request of &lt;code&gt;cpu: 1.1&lt;/code&gt; will
never be scheduled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check node capacities and amounts allocated with the
&lt;code&gt;kubectl describe nodes&lt;/code&gt; command. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl describe nodes e2e-test-node-pool-4lw4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Name:            e2e-test-node-pool-4lw4
[ ... lines removed for clarity ...]
Capacity:
 cpu:                               2
 memory:                            7679792Ki
 pods:                              110
Allocatable:
 cpu:                               1800m
 memory:                            7474992Ki
 pods:                              110
[ ... lines removed for clarity ...]
Non-terminated Pods:        (5 in total)
  Namespace    Name                                  CPU Requests  CPU Limits  Memory Requests  Memory Limits
  ---------    ----                                  ------------  ----------  ---------------  -------------
  kube-system  fluentd-gcp-v1.38-28bv1               100m (5%)     0 (0%)      200Mi (2%)       200Mi (2%)
  kube-system  kube-dns-3297075139-61lj3             260m (13%)    0 (0%)      100Mi (1%)       170Mi (2%)
  kube-system  kube-proxy-e2e-test-...               100m (5%)     0 (0%)      0 (0%)           0 (0%)
  kube-system  monitoring-influxdb-grafana-v4-z1m12  200m (10%)    200m (10%)  600Mi (8%)       600Mi (8%)
  kube-system  node-problem-detector-v0.1-fj7m3      20m (1%)      200m (10%)  20Mi (0%)        100Mi (1%)
Allocated resources:
  (Total limits may be over 100 percent, i.e., overcommitted.)
  CPU Requests    CPU Limits    Memory Requests    Memory Limits
  ------------    ----------    ---------------    -------------
  680m (34%)      400m (20%)    920Mi (11%)        1070Mi (13%)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the preceding output, you can see that if a Pod requests more than 1120m
CPUs or 6.23Gi of memory, it will not fit on the node.&lt;/p&gt;
&lt;p&gt;By looking at the &lt;code&gt;Pods&lt;/code&gt; section, you can see which Pods are taking up space on
the node.&lt;/p&gt;
&lt;p&gt;The amount of resources available to Pods is less than the node capacity, because
system daemons use a portion of the available resources. The &lt;code&gt;allocatable&lt;/code&gt; field
&lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/reference/generated/kubernetes-api/v1.19/#nodestatus-v1-core&#34;&gt;NodeStatus&lt;/a&gt;
gives the amount of resources that are available to Pods. For more information, see
&lt;a href=&#34;https://git.k8s.io/community/contributors/design-proposals/node/node-allocatable.md&#34;&gt;Node Allocatable Resources&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/concepts/policy/resource-quotas/&#34;&gt;resource quota&lt;/a&gt; feature can be configured
to limit the total amount of resources that can be consumed. If used in conjunction
with namespaces, it can prevent one team from hogging all the resources.&lt;/p&gt;
&lt;h3 id=&#34;my-container-is-terminated&#34;&gt;My Container is terminated&lt;/h3&gt;
&lt;p&gt;Your Container might get terminated because it is resource-starved. To check
whether a Container is being killed because it is hitting a resource limit, call
&lt;code&gt;kubectl describe pod&lt;/code&gt; on the Pod of interest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl describe pod simmemleak-hra99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Name:                           simmemleak-hra99
Namespace:                      default
Image(s):                       saadali/simmemleak
Node:                           kubernetes-node-tf0f/10.240.216.66
Labels:                         name=simmemleak
Status:                         Running
Reason:
Message:
IP:                             10.244.2.75
Replication Controllers:        simmemleak (1/1 replicas created)
Containers:
  simmemleak:
    Image:  saadali/simmemleak
    Limits:
      cpu:                      100m
      memory:                   50Mi
    State:                      Running
      Started:                  Tue, 07 Jul 2015 12:54:41 -0700
    Last Termination State:     Terminated
      Exit Code:                1
      Started:                  Fri, 07 Jul 2015 12:54:30 -0700
      Finished:                 Fri, 07 Jul 2015 12:54:33 -0700
    Ready:                      False
    Restart Count:              5
Conditions:
  Type      Status
  Ready     False
Events:
  FirstSeen                         LastSeen                         Count  From                              SubobjectPath                       Reason      Message
  Tue, 07 Jul 2015 12:53:51 -0700   Tue, 07 Jul 2015 12:53:51 -0700  1      {scheduler }                                                          scheduled   Successfully assigned simmemleak-hra99 to kubernetes-node-tf0f
  Tue, 07 Jul 2015 12:53:51 -0700   Tue, 07 Jul 2015 12:53:51 -0700  1      {kubelet kubernetes-node-tf0f}    implicitly required container POD   pulled      Pod container image &amp;quot;k8s.gcr.io/pause:0.8.0&amp;quot; already present on machine
  Tue, 07 Jul 2015 12:53:51 -0700   Tue, 07 Jul 2015 12:53:51 -0700  1      {kubelet kubernetes-node-tf0f}    implicitly required container POD   created     Created with docker id 6a41280f516d
  Tue, 07 Jul 2015 12:53:51 -0700   Tue, 07 Jul 2015 12:53:51 -0700  1      {kubelet kubernetes-node-tf0f}    implicitly required container POD   started     Started with docker id 6a41280f516d
  Tue, 07 Jul 2015 12:53:51 -0700   Tue, 07 Jul 2015 12:53:51 -0700  1      {kubelet kubernetes-node-tf0f}    spec.containers{simmemleak}         created     Created with docker id 87348f12526a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the preceding example, the &lt;code&gt;Restart Count:  5&lt;/code&gt; indicates that the &lt;code&gt;simmemleak&lt;/code&gt;
Container in the Pod was terminated and restarted five times.&lt;/p&gt;
&lt;p&gt;You can call &lt;code&gt;kubectl get pod&lt;/code&gt; with the &lt;code&gt;-o go-template=...&lt;/code&gt; option to fetch the status
of previously terminated Containers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl get pod -o go-template&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{{range.status.containerStatuses}}{{&amp;#34;Container Name: &amp;#34;}}{{.name}}{{&amp;#34;\r\nLastState: &amp;#34;}}{{.lastState}}{{end}}&amp;#39;&lt;/span&gt;  simmemleak-hra99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Container Name: simmemleak
LastState: map[terminated:map[exitCode:137 reason:OOM Killed startedAt:2015-07-07T20:58:43Z finishedAt:2015-07-07T20:58:43Z containerID:docker://0e4095bba1feccdfe7ef9fb6ebffe972b4b14285d5acdec6f0d3ae8a22fad8b2]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that the Container was terminated because of &lt;code&gt;reason:OOM Killed&lt;/code&gt;, where &lt;code&gt;OOM&lt;/code&gt; stands for Out Of Memory.&lt;/p&gt;
&lt;h2 id=&#34;相关资料&#34;&gt;相关资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get hands-on experience &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/tasks/configure-pod-container/assign-memory-resource/&#34;&gt;assigning Memory resources to Containers and Pods&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get hands-on experience &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/tasks/configure-pod-container/assign-cpu-resource/&#34;&gt;assigning CPU resources to Containers and Pods&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more details about the difference between requests and limits, see
&lt;a href=&#34;https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md&#34;&gt;Resource QoS&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read the &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/reference/generated/kubernetes-api/v1.19/#container-v1-core&#34;&gt;Container&lt;/a&gt; API reference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read the &lt;a href=&#34;https://lostsquirrel.github.io/k8sDocs/docs/reference/generated/kubernetes-api/v1.19/#resourcerequirements-v1-core&#34;&gt;ResourceRequirements&lt;/a&gt; API reference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read about &lt;a href=&#34;https://xfs.org/docs/xfsdocs-xml-dev/XFS_User_Guide/tmp/en-US/html/xfs-quotas.html&#34;&gt;project quotas&lt;/a&gt; in XFS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
