<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>K8S 文档笔记 on Kubernetes</title>
    <link>https://lostsquirrel.github.io/k8sDocs/</link>
    <description>Recent content in K8S 文档笔记 on Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 06 Jun 2020 15:26:15 +0000</lastBuildDate>
    
	<atom:link href="https://lostsquirrel.github.io/k8sDocs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pod 生命周期</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/pod-lifecycle/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/pod-lifecycle/</guid>
      <description>本文介经 Pod 的生命周期。 Pod 有一个既定的生命周期，开启后进行 Pending 阶段， 当其中至少有一个主要容器正常启动后变更为 Running 阶段， 如果所有容器全部正常启动则进</description>
    </item>
    
    <item>
      <title>Standardized Glossary</title>
      <link>https://lostsquirrel.github.io/k8sDocs/reference/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/reference/glossary/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Service</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/service/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/service/</guid>
      <description>No need to modify your application to use an unfamiliar service discovery mechanism. Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them. content_type: concept weight: 10 --- -- 以网络服务的方式让一个由一组 PodPod 表示集群中运行的一组容器的集</description>
    </item>
    
    <item>
      <title>Service Topology</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/service-topology/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/service-topology/</guid>
      <description>Routing of service traffic based upon cluster topology. content_type: concept weight: 10 --- -- 功能特性状态: Kubernetes v1.17 [alpha] _Service Topology_ enables a service to route traffic based upon the Node topology of the cluster. For example, a service can specify that traffic be preferentially routed to endpoints that are on the same Node as the client, or in the same availability zone. -- 功</description>
    </item>
    
    <item>
      <title>Service 和 Pod 的 DNS</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/dns-pod-service/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/dns-pod-service/</guid>
      <description>本文简述 k8s 对 DNS 的支持 介绍 k8s DNS 先在集群中部署了一个 DNS 的 Pod 和 Service， 并配置 kubelet 让每一个容器都使用 DNS Service 的 IP 来解析 DNS 名称。 啥东西会有 DNS 名称? 集</description>
    </item>
    
    <item>
      <title>通过 Service 连接应用</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/connect-applications-service/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/connect-applications-service/</guid>
      <description>连接到容器的 k8s 模型 到目前为止我们有一个持续运行的多副本应用，我们可以把它暴露到一个网络中。 在讨论 k8s 的网络实现前， 值得花点时间来看看 Docker 中普通的</description>
    </item>
    
    <item>
      <title>EndpointSlice</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/endpoint-slices/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/endpoint-slices/</guid>
      <description>功能特性状态: Kubernetes v1.17 [beta] _EndpointSlices_ provide a simple way to track network endpoints within a Kubernetes cluster. They offer a more scalable and extensible alternative to Endpoints. -- 功能特性状态: Kubernetes v1.17 [beta] EndpointSlice 提供了一种简单的方式来在 k8s 集群跟踪网络端点。 它提供</description>
    </item>
    
    <item>
      <title>Ingress</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/ingress/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/ingress/</guid>
      <description>功能特性状态: Kubernetes v1.19 [stable] 一个用于管理外部访问集群内 Service 的 API 对象，通常是 HTTP。 Ingress 还可以提供负载均衡，SSL 和基于名称的虚拟主机。 Service以</description>
    </item>
    
    <item>
      <title>Ingress 控制器</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/ingress-controllers/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/ingress-controllers/</guid>
      <description>要使一个 Ingress 工作的前提是集群中必须要有一个 Ingress 控制器在运行。 与其它类型的控制器作为 kube-controller-manager 的一部分运行不同， Ingress 不会自动在集群中 运行。 使用本文选择最适合</description>
    </item>
    
    <item>
      <title>网络策略</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/network-policies/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/network-policies/</guid>
      <description>podPod 表示集群中运行的一组容器的集合 is allowed to communicate with various network &#34;entities&#34; (we use the word &#34;entity&#34; here to avoid overloading the more common terms such as &#34;endpoints&#34; and &#34;services&#34;, which have specific Kubernetes connotations) over the network. The entities that a Pod can communicate with are identified through a combination of the following 3 identifiers: 1. Other</description>
    </item>
    
    <item>
      <title>通过 HostAliases 向 Pod 的 /etc/hosts 文件中添加条目</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/</guid>
      <description>在 DNS 和其它方式都不可用时，想要向通过向 Pod 的 /etc/hosts 文件添加条目的方式来重写 Pod 级别的域名解析，可能通过 PodSpec 的 HostAliases 字段向该 Pod 的 /etc/hosts 添加自定义条目。 不建议直接</description>
    </item>
    
    <item>
      <title>使用 Minikube 搭建 K8s环境</title>
      <link>https://lostsquirrel.github.io/k8sDocs/setup/01-learning-environment/00-minikube/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/setup/01-learning-environment/00-minikube/</guid>
      <description>特点 一个用于创建易于部署，运行在虚拟机的的本地单节点 k8s 集群的工具 适用场景 尝试与学习 k8s 日常开发 功能特性 DNS NodePorts ConfigMaps and Secrets Dashboards Container Runtime: Docker, CRI-O, and containerd Enabling CNI (Container Network Interface) Ingress 安装</description>
    </item>
    
    <item>
      <title>使用 Kind 搭建 K8s环境</title>
      <link>https://lostsquirrel.github.io/k8sDocs/setup/01-learning-environment/01-kind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/setup/01-learning-environment/01-kind/</guid>
      <description>整理中</description>
    </item>
    
    <item>
      <title>k8s 是什么</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/overview/00-what-is-k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/overview/00-what-is-k8s/</guid>
      <description>k8s 是一个可扩展，可移植的开源平台，用于管理容器化的工作负载和服务，帮助实现声明式配置与自动化，有一个区大且快速发展的生态系统 源自Google</description>
    </item>
    
    <item>
      <title>k8s 组件</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/overview/01-components/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/overview/01-components/</guid>
      <description>当完成 k8s 部署后，用户就拥有一个 k8s 集群， 一个 k8s 一般包含多台工作机，称为节点，用于运行容器化应用。 每个集群至少包含一个节点。 在节点上运行应用工作</description>
    </item>
    
    <item>
      <title>k8s API 说明</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/overview/02-k8s-api/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/overview/02-k8s-api/</guid>
      <description>k8s API 提供查询操作 k8s 对应状态的功能。 k8s 控制中心的核心是 api-server 及其提供的 HTTP API。包括用户，集群的其它组件，外部组件都是与 api-server 通信 全部的API约定在这</description>
    </item>
    
    <item>
      <title>节点</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/01-architecture/00-nodes/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/01-architecture/00-nodes/</guid>
      <description>k8s 将用户的工作负载窗口塞进 Pod 里然后运行在节点上，根据集群节点可以是虚拟机或物理机，每个节点必须要有运行 Pod 所需要的服务，并由 k8s 控制中心管理。 一</description>
    </item>
    
    <item>
      <title>控制中心与节点的通信</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/01-architecture/01-control-plane-node-communication/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/01-architecture/01-control-plane-node-communication/</guid>
      <description>本文主要介结控制中心(实际就是 api-server)与 k8s 集群通信的几种途径, 目的是使用户可以选择健壮的网络配置使集群可以运行在不受信的网络环</description>
    </item>
    
    <item>
      <title>控制器</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/01-architecture/02-controller/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/01-architecture/02-controller/</guid>
      <description>在机器人技术和自动化领域，一个控制回路就是一个控制系统状态的无限循环。 以下为控制回路的一个示例: 房间内的温度控制器 当用户设定一个温度值时，就</description>
    </item>
    
    <item>
      <title>Cloud Controller Manager</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/01-architecture/03-cloud-controller/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/01-architecture/03-cloud-controller/</guid>
      <description>功能特性状态: Kubernetes v1.11 [beta] 云基础设施技术让用户可以在公有云，私有云，混合云上运行 k8s. k8s 倡导自动化， API 驱动，组件之间松耦合的基础设施 cloud-controller-manager 是集成了云提供商</description>
    </item>
    
    <item>
      <title>镜像</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/containers/00-images/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/containers/00-images/</guid>
      <description>一个容器镜像就是构建应用的二进制数据和应用所以需要的依赖。 容器镜像是一个可独立运行的可执行软件包，并定义了清楚的运行环境。 通常是用户创建一个</description>
    </item>
    
    <item>
      <title>容器环境</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/containers/01-container-environment/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/containers/01-container-environment/</guid>
      <description>本文主要介绍以环境提供容器的资源信息 容器内的环境变量 k8s 环境为容器提供了一些重要的资源信息： 一个包含镜像和一个或多个卷组合成的文件系统 关于容器</description>
    </item>
    
    <item>
      <title>Runtime Class</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/containers/02-runtime-class/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/containers/02-runtime-class/</guid>
      <description>功能特性状态: Kubernetes v1.14 [beta] 本文介绍 RuntimeClass 资源和运行时选择机制。 RuntimeClass 是一个选择容器运行时配置的特性。而容器运行时配置则用于运行 Pod 中的容器的。 Motivation 用户可以在不</description>
    </item>
    
    <item>
      <title>容器生命周期钩子</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/containers/container-lifecycle-hooks/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/containers/container-lifecycle-hooks/</guid>
      <description>本文主要介绍如何使用容器生命周期钩子框架来实现由 kubelet 管理的容器通过在管理过程中的生命周期事件来触发代理运行。 概述 与许多编程语言的框架的组件有生</description>
    </item>
    
    <item>
      <title>下载安装配置 kubectl</title>
      <link>https://lostsquirrel.github.io/k8sDocs/tasks/tools/00-install-kubectl/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/tasks/tools/00-install-kubectl/</guid>
      <description>kubectl 是 k8s 的命令行工具，用于通过命令管理k8s集群。 kubectl 可以用于部署应用，查看和管理集群资源，查看日志，具体使用明细请见 源地址 本站地址 准备 kubectl 版本与</description>
    </item>
    
    <item>
      <title>kubectl 概览</title>
      <link>https://lostsquirrel.github.io/k8sDocs/reference/07-kubectl/00-overview/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/reference/07-kubectl/00-overview/</guid>
      <description>working in progress</description>
    </item>
    
    <item>
      <title>k8s 对象介绍</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/00-kubernetes-objects/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/00-kubernetes-objects/</guid>
      <description>本文介绍 k8s 对象 是怎么在 k8s API 中表示的，怎么以 .yaml 格式输出 k8s 对象 简介 k8s 对象是 k8s 系统中持久化的实体， k8s 使用这些实体来表示集群的状态，它们具体可以表示</description>
    </item>
    
    <item>
      <title>对象命令与ID</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/names/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/names/</guid>
      <description>在 k8s 的对象中，同一类型的对象名称唯一， 比如在一个 命名空间中只能有一个叫 myapp-1234 在 Pod， 但不同类型的资源可以有相同的名称，比如还可以定义一个叫 myapp-1234 在</description>
    </item>
    
    <item>
      <title>命名空间(Namespaces)</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/02-namespace/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/02-namespace/</guid>
      <description>k8s 可以在一个物理集群上创建多个虚拟集群, 每个命名空间就是一个虚拟集群 啥时候用命名空间 命名空间是为用户分散于有多个组或项目下的场景设计的。 如果</description>
    </item>
    
    <item>
      <title>标签和标签选择器</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/labels/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/labels/</guid>
      <description>标签是附加在对象上的键值对，应该与所在的对象有关且具有意义 标签可以用于组织和筛选一组对象 标签可以在对象创建时就定义，也可以在对象创建后任何时</description>
    </item>
    
    <item>
      <title>注解 (Annotations)</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/04-annotation/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/04-annotation/</guid>
      <description>用户可以将任非标识符元素关联到对象上，其它库或工具可以读取这些元数据 关联元数据到对象 用户可以通过标签或注意的方式将元数据关联到对象上，标签用</description>
    </item>
    
    <item>
      <title>字段选择器</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/05-field-selectors/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/05-field-selectors/</guid>
      <description>用户可以通过字段选择器的以对象的一个或多个字段的值作为选择条件实现对 k8s 对象的选择。示例如下: metadata.name=my-service metadata.namespace!=default status.phase=Pending 以下 kubectl 命令通过选择器，选择 status.phase 字段值是 Running 的对</description>
    </item>
    
    <item>
      <title>标签设置指导</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/06-common-labels/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/overview/working-with-objects/06-common-labels/</guid>
      <description>用户可以使用 kubectl 和 dashboard 外的可视化管理工具。一些通用的描述对象信息的标签配置可以让这些工具更好地工作 为了工具能更好的使用这些标签，建议标签以方便查</description>
    </item>
    
    <item>
      <title>初始化容器</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/init-containers/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/init-containers/</guid>
      <description>PodPod 表示集群中运行的一组容器的集合 . Init containers can contain utilities or setup scripts not present in an app image. You can specify init containers in the Pod specification alongside the `containers` array (which describes app containers). -- 本文主要介绍初始化容器: 一种在 Pod 中在应用容</description>
    </item>
    
    <item>
      <title>Pod 拓扑分布约束条件</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/pod-topology-spread-constraints/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/pod-topology-spread-constraints/</guid>
      <description>功能特性状态: Kubernetes v1.18 [beta] You can use _topology spread constraints_ to control how PodsPod 表示集群中运行的一组容器的集合 are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains. This can help to achieve high availability as well as efficient resource utilization. -- 功能特性</description>
    </item>
    
    <item>
      <title>Pod 预设信息</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/podpreset/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/podpreset/</guid>
      <description>功能特性状态: Kubernetes v1.6 [alpha] This page provides an overview of PodPresets, which are objects for injecting certain information into pods at creation time. The information can include secrets, volumes, volume mounts, and environment variables. 功能特性状态: Kubernetes v1.6 [alpha] 本文简单介绍 PodPreset， 一个用于</description>
    </item>
    
    <item>
      <title>Disruptions</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/disruptions/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/disruptions/</guid>
      <description>本文主要给 那些需要构建高可用应用的应用所属者，需要理解 Pod 可能遇到哪些类型的故障 也适用于那些需要实现自动集群操作，如升级或集群自动扩容的集群管</description>
    </item>
    
    <item>
      <title>临时容器</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/ephemeral-containers/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/pods/ephemeral-containers/</guid>
      <description>功能特性状态: Kubernetes v1.16 [alpha] This page provides an overview of ephemeral containers: a special type of container that runs temporarily in an existing PodPod 表示集群中运行的一组容器的集合 to accomplish user-initiated actions such as troubleshooting. You use ephemeral containers to inspect services rather than to build applications. 警告： Ephemeral containers are</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/deployment/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/deployment/</guid>
      <description>Kubernetes progressively rolls out changes to your application or its configuration, while monitoring application health to ensure it doesn&#39;t kill all your instances at the same time. If something goes wrong, Kubernetes will rollback the change for you. Take advantage of a growing ecosystem of deployment solutions. content_type: concept weight: 10 --- -- PodsPod 表示集群中运行的一组容器的集合 ReplicaSetsReplicaSet</description>
    </item>
    
    <item>
      <title>ReplicaSet</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/replicaset/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/replicaset/</guid>
      <description>ReplicaSet 的作用是在任意时间内维持一个稳定的 Pod 副本集。因此它经常被用来保证特定 Pod 在指定的数量以提供可用性。 控制器一个控制回路，负责通过 apiserver 监控集群的共</description>
    </item>
    
    <item>
      <title>StatefulSet</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/statefulset/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/statefulset/</guid>
      <description>管理一个 PodPod 表示集群中运行的一组容器的集合 集合的部署与容量伸缩，并提供了顺序的一致性和唯一性 与 Deployment管理集群中的一个多副本应用 类</description>
    </item>
    
    <item>
      <title>DaemonSet</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/daemonset/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/daemonset/</guid>
      <description>DaemonSet 确保所以(或部分)节点上都会运行一个副本的 Pod。 当有节点加入到集群时，这个 Pod 也会自动加到该节点上。 当节点从集群移除时， 这些 Pod 也会被垃圾清</description>
    </item>
    
    <item>
      <title>Job</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/job/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/job/</guid>
      <description>In addition to services, Kubernetes can manage your batch and CI workloads, replacing containers that fail, if desired. weight: 50 --- -- 一个 Job 会创建一个或多个 Pod 并保证这些 Pod 中指定数量的最终执行完成并终止。 当一个 Pod 成功完成时， Job 跟踪这</description>
    </item>
    
    <item>
      <title>垃圾回收</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/garbage-collection/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/garbage-collection/</guid>
      <description>在 k8s 中垃圾回收的作用就是删除那些曾经有所有者，现在没有的对象。 controllers/replicaset.yaml apiVersion: apps/v1 kind: ReplicaSet metadata: name: my-repset spec: replicas: 3 selector: matchLabels: pod-is-for: garbage-collection-example template: metadata: labels: pod-is-for: garbage-collection-example spec: containers: - name: nginx image: nginx If you create the ReplicaSet and then view the Pod metadata, you</description>
    </item>
    
    <item>
      <title>用于已完成资源的 TTL 控制器</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/ttlafterfinished/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/ttlafterfinished/</guid>
      <description>功能特性状态: Kubernetes v1.12 [alpha] The TTL controller provides a TTL (time to live) mechanism to limit the lifetime of resource objects that have finished execution. TTL controller only handles Jobs一个运行后即结束的有限或批量任务 for now, and may be expanded to handle other resources that will finish execution, such</description>
    </item>
    
    <item>
      <title>CronJob</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/cron-jobs/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/cron-jobs/</guid>
      <description>功能特性状态: Kubernetes v1.8 [beta] A _CronJob_ creates Jobs一个运行后即结束的有限或批量任务 on a repeating schedule. One CronJob object is like one line of a _crontab_ (cron table) file. It runs a job periodically on a given schedule, written in [Cron](https://en.wikipedia.org/wiki/Cron) format. 注意： All CronJob schedule: times</description>
    </item>
    
    <item>
      <title>ReplicationController</title>
      <link>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/replicationcontroller/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/concepts/workloads/controllers/replicationcontroller/</guid>
      <description>Restarts containers that fail, replaces and reschedules containers when nodes die, kills containers that don&#39;t respond to your user-defined health check, and doesn&#39;t advertise them to clients until they are ready to serve. content_type: concept weight: 90 --- -- 说明： A Deployment that configures a ReplicaSet is now the recommended way to set up replication. A _ReplicationController_ ensures that a specified number of pod replicas are running at</description>
    </item>
    
    <item>
      <title>安装 Minikube</title>
      <link>https://lostsquirrel.github.io/k8sDocs/tasks/tools/01-install-minikube/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/tasks/tools/01-install-minikube/</guid>
      <description>本文介结 Minikube 安装， Minikube 是一个创建运行在虚拟机的的本地单节点 k8s 集群的工具 环境准备 检查本机虚拟化支持 grep -E --color &#39;vmx|svm&#39; /proc/cpuinfo 安装 虚拟机管理程序(以下选择一个) VirtualBox KVM</description>
    </item>
    
    <item>
      <title>存活(liveness), 就绪(readiness), 启动(startup)探针配置</title>
      <link>https://lostsquirrel.github.io/k8sDocs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/</link>
      <pubDate>Fri, 22 May 2020 10:52:35 +0800</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/</guid>
      <description>本文介结怎么配置容器的 存活, 就绪, 启动探针配置 kubelet 通过存活探针的结果来决定何时应该重启容器。例如，可以发现一个应用在运行但不能继续干活比如发生</description>
    </item>
    
    <item>
      <title></title>
      <link>https://lostsquirrel.github.io/k8sDocs/examples/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lostsquirrel.github.io/k8sDocs/examples/readme/</guid>
      <description>To run the tests for a localization, use the following command:
go test k8s.io/website/content/&amp;lt;lang&amp;gt;/examples where &amp;lt;lang&amp;gt; is the two character representation of a language. For example:
go test k8s.io/website/content/en/examples </description>
    </item>
    
  </channel>
</rss>